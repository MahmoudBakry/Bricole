{"version":3,"sources":["../../../src/controllers/bricoler-bt-citty/trip.controller.js"],"names":["validateBody","isUpdate","validations","exists","withMessage","createNewTrip","req","res","next","validationErrors","array","length","ApiError","bricolerId","params","User","findById","userDetails","status","end","files","body","imgs","x","push","travelingDate","parseInt","returnDate","bricoler","TripBtCity","create","newDoc","json","fetchAllTripsBtCities","limit","query","page","from","to","tripType","matchQueryRegx","RegExp","matchQueryRegxTo","find","populate","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil","fetchAllTripsForOneBricoler"],"mappings":"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","file":"trip.controller.js","sourcesContent":["import TripBtCity from '../../models/trip-bt-ciy.model';\nimport User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\nimport { toImgUrl } from '../../utils/index'\nimport { escapeRegExp } from 'lodash';\n\nexport default {\n\n    //validation for create new bricol\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"from\").exists().withMessage(\"from is required\"),\n            body(\"to\").exists().withMessage(\"to is required\"),\n        ];\n        return validations;\n    },\n    //create new trip logic\n    async createNewTrip(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            let bricolerId = req.params.bricolerId;\n            let userDetails = await User.findById(bricolerId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            //prepare data \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            }\n            req.body.travelingDate = parseInt(req.body.travelingDate)\n            req.body.returnDate = parseInt(req.body.returnDate)\n            req.body.bricoler = req.params.bricolerId;\n\n            let newDoc = await TripBtCity.create(req.body);\n            return res.status(201).json(newDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all trips bt cities \n    async fetchAllTripsBtCities(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            //filter it \n            let { status, from, to, tripType } = req.query;\n            let query = {}\n\n            if (status)\n                query.status = status;\n\n            if (from) {\n                const matchQueryRegx = new RegExp(escapeRegExp(from), 'i')\n                query.from = matchQueryRegx;\n            }\n\n            if (to) {\n                const matchQueryRegxTo = new RegExp(escapeRegExp(to), 'i')\n                query.to = matchQueryRegxTo;\n            }\n\n            if (tripType)\n                query.tripType = tripType\n\n            let allDocs = await TripBtCity.find(query)\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            //return responce \n            let count = await TripBtCity.count(query);\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    //fetch all trips under one bricoler \n    async fetchAllTripsForOneBricoler(req, res, next) {\n        try {\n            let bricolerId = req.params.bricolerId;\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let userDetails = await User.findById(bricolerId);\n            if (!userDetails)\n                return res.status(404).end();\n            //filter it \n            let { status, from, to, tripType } = req.query;\n            let query = {}\n\n            if (status)\n                query.status = status;\n\n            if (from) {\n                const matchQueryRegx = new RegExp(escapeRegExp(from), 'i')\n                query.from = matchQueryRegx;\n            }\n\n            if (to) {\n                const matchQueryRegxTo = new RegExp(escapeRegExp(to), 'i')\n                query.to = matchQueryRegxTo;\n            }\n\n            if (tripType)\n                query.tripType = tripType\n            query.bricoler = bricolerId;\n\n            //data base query \n            let allDocs = await TripBtCity.find(query)\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            //return responce \n            let count = await TripBtCity.count(query);\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n}"]}