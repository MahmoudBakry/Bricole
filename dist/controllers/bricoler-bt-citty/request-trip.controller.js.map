{"version":3,"sources":["../../../src/controllers/bricoler-bt-citty/request-trip.controller.js"],"names":["createNewRequest","req","res","next","tripId","params","TripBtCity","findById","tripDetails","status","end","body","trip","user","_id","RequestTripBtCity","create","newDoc","json","retriveAllRequestUnderOneTrip","limit","parseInt","query","page","find","populate","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil","retriveOneRequest","requestId","requestDetails","acceptRequest","save","id","ignoreRequest"],"mappings":"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","file":"request-trip.controller.js","sourcesContent":["import TripBtCity from '../../models/trip-bt-ciy.model';\nimport User from '../../models/user.model';\nimport RequestTripBtCity from '../../models/request-bricoler-bt-city.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\nimport { toImgUrl } from '../../utils/index'\nimport { escapeRegExp } from 'lodash';\n\nexport default {\n    async createNewRequest(req, res, next) {\n        try {\n            let tripId = req.params.tripId;\n            let tripDetails = await TripBtCity.findById(tripId);\n            if (!tripDetails)\n                return res.status(404).end();\n            //prepare data \n            req.body.trip = tripId;\n            req.body.user = req.user._id;\n            //data base query\n            let newDoc = await RequestTripBtCity.create(req.body);\n\n            return res.status(201).json(newDoc);\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive all request under one trip \n    async retriveAllRequestUnderOneTrip(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let tripId = req.params.tripId;\n            let tripDetails = await TripBtCity.findById(tripId);\n            if (!tripDetails)\n                return res.status(404).end();\n\n            let query = {}\n            query.trip = tripId;\n\n            let allDocs = await RequestTripBtCity.find(query)\n                .populate('trip')\n                .populate('user')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            //return responce \n            let count = await RequestTripBtCity.count(query);\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive one Request \n    async retriveOneRequest(req, res, next) {\n        try {\n            let tripId = req.params.tripId;\n            let tripDetails = await TripBtCity.findById(tripId);\n            if (!tripDetails)\n                return res.status(404).end();\n\n            let requestId = req.params.requestId;\n            let requestDetails = await RequestTripBtCity.findById(requestId)\n                .populate('trip')\n                .populate('user')\n\n            return res.status(200).json(requestDetails);\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //accept request \n    async acceptRequest(req, res, next) {\n        try {\n            let tripId = req.params.tripId;\n            let tripDetails = await TripBtCity.findById(tripId);\n            if (!tripDetails)\n                return res.status(404).end();\n\n            let requestId = req.params.requestId;\n            let requestDetails = await RequestTripBtCity.findById(requestId)\n            if (!requestDetails)\n                return res.status(404).end();\n\n            //update status\n            requestDetails.status = 'accept';\n            await requestDetails.save();\n\n            //responce\n            let newDoc = await RequestTripBtCity.findById(requestDetails.id);\n            return res.status(200).json(newDoc)\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    //ignore request \n    async ignoreRequest(req, res, next) {\n        try {\n            let tripId = req.params.tripId;\n            let tripDetails = await TripBtCity.findById(tripId);\n            if (!tripDetails)\n                return res.status(404).end();\n\n            let requestId = req.params.requestId;\n            let requestDetails = await RequestTripBtCity.findById(requestId)\n            if (!requestDetails)\n                return res.status(404).end();\n\n            //update status\n            requestDetails.status = 'ignore';\n            await requestDetails.save();\n\n            //responce\n            let newDoc = await RequestTripBtCity.findById(requestDetails.id);\n            return res.status(200).json(newDoc)\n\n        } catch (err) {\n            next(err)\n        }\n    }\n}"]}