{"version":3,"sources":["../../src/controllers/bricol.controller.js"],"names":["_","deg2rad","deg","Math","PI","validateBody","isUpdate","validations","exists","withMessage","addNewBricol","req","res","next","validationErrors","array","length","ApiError","files","body","imgs","x","push","lang","lat","bricolLocation","location","user","_id","dueDate","parseInt","Bricol","create","newDoc","findById","id","populate","createdDoc","historyObject","serviceType","service","status","History","historyDoc","console","log","json","retriveAllBricol","query","vehicleToWork","jobs","bricolerGender","startPrice","endPrice","split","job","$in","budget","$gte","$lte","q","matchQueryRegx","RegExp","title","sort","creationDate","maxPrice","minPrice","limit","page","find","skip","allDocs","userLocation","result","bricolLocationToDistance","lang1","parseFloat","lat1","lang2","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","bidQuery","bricol","bidType","Bid","count","countOfBids","distanceInKm","send","ApiResponse","ceil","validateBodyOfCalulateDisance","calculateDistance","reriveOneBricolDetails","bricolId","params","bricolDetails","end"],"mappings":"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","file":"bricol.controller.js","sourcesContent":["import Bricol from '../models/bricole.model';\nimport User from '../models/user.model';\nimport Bid from '../models/bid.model';\nimport History from '../models/history.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { toImgUrl } from '../utils/index'\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\nimport * as _ from 'lodash';\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\n\nexport default {\n\n    //validation for create new bricol\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"title\").exists().withMessage(\"title is required\"),\n            body(\"descripption\").exists().withMessage(\"descripption is required\"),\n            body('lang').exists().withMessage(\"lang  is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"bricolerGender\").exists().withMessage(\"bricolerGender is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"dueDate\").exists().withMessage(\"dueDate is required\")\n        ];\n        return validations;\n    },\n\n    //logic add new bricol\n    async addNewBricol(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            //prepare bricol data \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            } else\n                return next(new ApiError(422, \"imgs are required\"))\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let bricolLocation = [lang, lat] //modify location \n            req.body.location = bricolLocation;\n            req.body.user = req.user._id;\n            req.body.dueDate = parseInt(req.body.dueDate)\n\n            let newDoc = await Bricol.create(req.body);\n            let createdDoc = await Bricol.findById(newDoc.id)\n                .populate('user')\n                .populate('job')\n            //create history doc \n            let historyObject = {\n                serviceType: 'bricol',\n                service: createdDoc.id,\n                user: createdDoc.user,\n                status : 'pendding'\n            }\n            let historyDoc = await History.create(historyObject);\n            console.log(historyDoc.status)\n            return res.status(201).json(createdDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fetch all bricoles \n    async retriveAllBricol(req, res, next) {\n        try {\n            let { vehicleToWork, jobs, bricolerGender, startPrice, endPrice } = req.query\n            let query = {};\n            //filter by jobs\n            if (jobs) {\n                jobs = jobs.split(',');\n                if (jobs.length > 1)\n                    query.job = { $in: jobs };\n                else\n                    query.job = jobs[0];\n            }\n            //filter by vehicleToWork\n            if (vehicleToWork) {\n                vehicleToWork = vehicleToWork.split(',');\n                if (vehicleToWork.length > 1)\n                    query.vehicleToWork = { $in: vehicleToWork };\n                else\n                    query.vehicleToWork = vehicleToWork[0];\n            }\n            //filter by bricolerGender\n            if (bricolerGender)\n                query.bricolerGender = bricolerGender;\n            //filteration by start & end price [budget]\n            if (startPrice)\n                query.budget = { $gte: +startPrice };\n            if (endPrice)\n                query.budget = { ...query.budget, $lte: +endPrice };\n            //search by word in title of bricol \n            if (req.query.q) {\n                const matchQueryRegx = new RegExp(escapeRegExp(req.query.q), 'i')\n                query.title = matchQueryRegx;\n            }\n\n            //filter only pendding bricole \n            query.status = \"pendding\";\n\n            //sorted docs\n            let sort = {}\n            sort.creationDate = -1;\n            if (req.query.maxPrice) {\n                sort.budget = -1;\n            }\n\n            if (req.query.minPrice) {\n                sort.budget = 1;\n            }\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let allDocs = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .skip((page - 1) * limit)\n                .limit(limit).sort(sort)\n\n            //prepare response \n\n            //1 - calculate distance between user and bricol\n            let userLocation = req.user.location;\n            let result = []\n            for (let x = 0; x < allDocs.length; x++) {\n                let bricolLocationToDistance = allDocs[x].location;\n\n                //first locattion point\n                let lang1 = parseFloat(bricolLocationToDistance[0]);\n                let lat1 = parseFloat(bricolLocationToDistance[1]);\n                console.log(lang1)\n\n                //scound location point\n                let lang2 = parseFloat(userLocation[0]);\n                let lat2 = parseFloat(userLocation[1]);\n\n                let R = 6371; // Radius of the earth in km\n                let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n                let dLon = deg2rad(lang2 - lang1);\n                let a =\n                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n                let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                let d = R * c; // Distance in km\n                //console.log(d)\n\n                //get count of bids for each bricol\n                let bidQuery = {\n                    bricol: allDocs[x].id,\n                    bidType: 'bricol'\n                }\n                let countOfBids = await Bid.count(bidQuery)\n                result.push({ bricol: allDocs[x], distanceInKm: d, countOfBids })\n            }\n\n            let count = await Bricol.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //validation input of calulate price \n    validateBodyOfCalulateDisance() {\n        return [\n            body(\"bricol\").exists().withMessage(\"bricol location is required\"),\n            body(\"user\").exists().withMessage(\"user location is required\")\n        ]\n    },\n    //calculate distance between bricole and user \n    async calculateDistance(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            //first locattion point\n            let lang1 = parseFloat(req.body.bricol.lang);\n            let lat1 = parseFloat(req.body.bricol.lat);\n            //scound location point\n            let lang2 = parseFloat(req.body.user.lang);\n            let lat2 = parseFloat(req.body.user.lat);\n\n            let R = 6371; // Radius of the earth in km\n            let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n            let dLon = deg2rad(lang2 - lang1);\n            let a =\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            let d = R * c; // Distance in km\n            console.log(d);\n            return res.status(200).json({ distanceInKm: d })\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive one bricol \n    async reriveOneBricolDetails(req, res, next) {\n        let bricolId = req.params.bricolId;\n        try {\n            let bricolDetails = await Bricol.findById(bricolId)\n                .populate('user')\n                .populate('job')\n                .populate('bricoler')\n\n            if (!bricolDetails)\n                return res.status(404).end();\n\n            let countOfBids = await Bid.count({ bricol: bricolDetails.id })\n            return res.status(200).json({ bricol: bricolDetails, countOfBids: countOfBids })\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}\n\n"]}