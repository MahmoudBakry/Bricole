{"version":3,"sources":["../../src/controllers/bricol.controller.js"],"names":["validateBody","isUpdate","validations","exists","withMessage","addNewBricol","req","res","next","validationErrors","array","length","ApiError","files","body","imgs","x","push","lang","lat","bricolLocation","location","user","_id","dueDate","parseInt","Bricol","create","newDoc","findById","id","populate","createdDoc","status","json","retriveAllBricol","query","vehicleToWork","job","bricolerGender","split","$in","limit","page","find","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil"],"mappings":"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","file":"bricol.controller.js","sourcesContent":["import Bricol from '../models/bricole.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { toImgUrl } from '../utils/index'\nimport { body, param, validationResult } from 'express-validator/check';\n\nexport default {\n\n    //validation for create new bricol\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"title\").exists().withMessage(\"title is required\"),\n            body(\"descripption\").exists().withMessage(\"descripption is required\"),\n            body('lang').exists().withMessage(\"lang  is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"bricolerGender\").exists().withMessage(\"bricolerGender is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"dueDate\").exists().withMessage(\"dueDate is required\")\n        ];\n        return validations;\n    },\n\n    //logic add new bricol\n    async addNewBricol(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            //prepare bricol data \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            } else\n                return next(new ApiError(422, \"imgs are required\"))\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let bricolLocation = [lang, lat] //modify location \n            req.body.location = bricolLocation;\n            req.body.user = req.user._id;\n            req.body.dueDate = parseInt(req.body.dueDate)\n\n            let newDoc = await Bricol.create(req.body);\n            let createdDoc = await Bricol.findById(newDoc.id)\n                .populate('user')\n                .populate('job')\n            return res.status(201).json(createdDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fetch all bricoles \n    async retriveAllBricol(req, res, next) {\n        try {\n            let { vehicleToWork, job, bricolerGender } = req.query\n            let query = {};\n            //filter by jobs\n            if (job) {\n                job = job.split(',');\n                if (job.length > 1)\n                    query.job = { $in: job };\n                else\n                    query.job = job[0];\n            }\n            //filter by vehicleToWork\n            if (vehicleToWork) {\n                vehicleToWork = vehicleToWork.split(',');\n                if (vehicleToWork.length > 1)\n                    query.vehicleToWork = { $in: vehicleToWork };\n                else\n                    query.vehicleToWork = vehicleToWork[0];\n            }\n            //filter by bricolerGender\n            if (bricolerGender)\n                query.bricolerGender = bricolerGender;\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let allDocs = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await Bricol.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n}\n\n"]}