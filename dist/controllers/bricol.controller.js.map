{"version":3,"sources":["../../src/controllers/bricol.controller.js"],"names":["deg2rad","deg","Math","PI","validateBody","isUpdate","validations","exists","withMessage","addNewBricol","req","res","next","validationErrors","array","length","ApiError","files","body","imgs","x","push","lang","lat","bricolLocation","location","user","_id","dueDate","parseInt","Bricol","create","newDoc","findById","id","populate","createdDoc","status","json","retriveAllBricol","query","vehicleToWork","job","bricolerGender","startPrice","endPrice","split","$in","budget","$gte","$lte","q","matchQueryRegx","RegExp","title","sort","maxPrice","creationDate","minPrice","limit","page","find","skip","allDocs","userLocation","result","bricolLocationToDistance","lang1","parseFloat","lat1","console","log","lang2","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","Bid","count","bricol","countOfBids","distanceInKm","send","ApiResponse","ceil","validateBodyOfCalulateDisance","calculateDistance","reriveOneBricolDetails","bricolId","params","bricolDetails","end"],"mappings":"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","file":"bricol.controller.js","sourcesContent":["import Bricol from '../models/bricole.model';\nimport User from '../models/user.model';\nimport Bid from '../models/bid.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { toImgUrl } from '../utils/index'\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\n\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\n\nexport default {\n\n    //validation for create new bricol\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"title\").exists().withMessage(\"title is required\"),\n            body(\"descripption\").exists().withMessage(\"descripption is required\"),\n            body('lang').exists().withMessage(\"lang  is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"bricolerGender\").exists().withMessage(\"bricolerGender is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"dueDate\").exists().withMessage(\"dueDate is required\")\n        ];\n        return validations;\n    },\n\n    //logic add new bricol\n    async addNewBricol(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            //prepare bricol data \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            } else\n                return next(new ApiError(422, \"imgs are required\"))\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let bricolLocation = [lang, lat] //modify location \n            req.body.location = bricolLocation;\n            req.body.user = req.user._id;\n            req.body.dueDate = parseInt(req.body.dueDate)\n\n            let newDoc = await Bricol.create(req.body);\n            let createdDoc = await Bricol.findById(newDoc.id)\n                .populate('user')\n                .populate('job')\n            return res.status(201).json(createdDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fetch all bricoles \n    async retriveAllBricol(req, res, next) {\n        try {\n            let { vehicleToWork, job, bricolerGender, startPrice, endPrice } = req.query\n            let query = {};\n            //filter by jobs\n            if (job) {\n                job = job.split(',');\n                if (job.length > 1)\n                    query.job = { $in: job };\n                else\n                    query.job = job[0];\n            }\n            //filter by vehicleToWork\n            if (vehicleToWork) {\n                vehicleToWork = vehicleToWork.split(',');\n                if (vehicleToWork.length > 1)\n                    query.vehicleToWork = { $in: vehicleToWork };\n                else\n                    query.vehicleToWork = vehicleToWork[0];\n            }\n            //filter by bricolerGender\n            if (bricolerGender)\n                query.bricolerGender = bricolerGender;\n            //filteration by start & end price [budget]\n            if (startPrice)\n                query.budget = { $gte: +startPrice };\n            if (endPrice)\n                query.budget = { ...query.budget, $lte: +endPrice };\n            //search by word in title of bricol \n            if (req.query.q) {\n                const matchQueryRegx = new RegExp(escapeRegExp(req.query.q), 'i')\n                query.title = matchQueryRegx;\n            }\n\n            //sorted docs\n            let sort = {}\n            if (req.query.maxPrice) {\n                sort.budget = -1;\n                sort.creationDate = -1;\n            }\n\n            if (req.query.minPrice) {\n                sort.budget = 1;\n                sort.creationDate = -1;\n            }\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let allDocs = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .skip((page - 1) * limit)\n                .limit(limit).sort(sort)\n\n            //prepare response \n\n            //1 - calculate distance between user and bricol\n            let userLocation = req.user.location;\n            let result = []\n            for (let x = 0; x < allDocs.length; x++) {\n                let bricolLocationToDistance = allDocs[x].location;\n\n                //first locattion point\n                let lang1 = parseFloat(bricolLocationToDistance[0]);\n                let lat1 = parseFloat(bricolLocationToDistance[1]);\n                console.log(lang1)\n\n                //scound location point\n                let lang2 = parseFloat(userLocation[0]);\n                let lat2 = parseFloat(userLocation[1]);\n\n                let R = 6371; // Radius of the earth in km\n                let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n                let dLon = deg2rad(lang2 - lang1);\n                let a =\n                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n                let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                let d = R * c; // Distance in km\n                //console.log(d)\n\n                //get count of bids for each bricol\n                let countOfBids = await Bid.count({ bricol: allDocs[x].id })\n                result.push({ bricol: allDocs[x], distanceInKm: d, countOfBids })\n            }\n\n            let count = await Bricol.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //validation input of calulate price \n    validateBodyOfCalulateDisance() {\n        return [\n            body(\"bricol\").exists().withMessage(\"bricol location is required\"),\n            body(\"user\").exists().withMessage(\"user location is required\")\n        ]\n    },\n    //calculate distance between bricole and user \n    async calculateDistance(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            //first locattion point\n            let lang1 = parseFloat(req.body.bricol.lang);\n            let lat1 = parseFloat(req.body.bricol.lat);\n            //scound location point\n            let lang2 = parseFloat(req.body.user.lang);\n            let lat2 = parseFloat(req.body.user.lat);\n\n            let R = 6371; // Radius of the earth in km\n            let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n            let dLon = deg2rad(lang2 - lang1);\n            let a =\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            let d = R * c; // Distance in km\n            console.log(d);\n            return res.status(200).json({ distanceInKm: d })\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive one bricol \n    async reriveOneBricolDetails(req, res, next) {\n        let bricolId = req.params.bricolId;\n        try {\n            let bricolDetails = await Bricol.findById(bricolId)\n                .populate('user')\n                .populate('job')\n\n            if (!bricolDetails)\n                return res.status(404).end();\n            return res.status(200).json(bricolDetails)\n        } catch (err) {\n            next(err)\n        }\n    },\n}\n\n"]}