{"version":3,"sources":["../../src/controllers/bricol.controller.js"],"names":["deg2rad","deg","Math","PI","validateBody","isUpdate","validations","exists","withMessage","addNewBricol","req","res","next","validationErrors","array","length","ApiError","files","body","imgs","x","push","lang","lat","bricolLocation","location","user","_id","dueDate","parseInt","Bricol","create","newDoc","findById","id","populate","createdDoc","status","json","retriveAllBricol","query","vehicleToWork","job","bricolerGender","startPrice","endPrice","split","$in","budget","$gte","$lte","q","matchQueryRegx","RegExp","title","sort","maxPrice","creationDate","minPrice","limit","page","find","skip","allDocs","count","send","ApiResponse","ceil","validateBodyOfCalulateDisance","calculateDistance","lang1","parseFloat","bricol","lat1","lang2","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","console","log","distanceInKm","reriveOneBricolDetails","bricolId","params","bricolDetails","end"],"mappings":"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","file":"bricol.controller.js","sourcesContent":["import Bricol from '../models/bricole.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { toImgUrl } from '../utils/index'\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\n\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\n\nexport default {\n\n    //validation for create new bricol\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"title\").exists().withMessage(\"title is required\"),\n            body(\"descripption\").exists().withMessage(\"descripption is required\"),\n            body('lang').exists().withMessage(\"lang  is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"bricolerGender\").exists().withMessage(\"bricolerGender is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"dueDate\").exists().withMessage(\"dueDate is required\")\n        ];\n        return validations;\n    },\n\n    //logic add new bricol\n    async addNewBricol(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            //prepare bricol data \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            } else\n                return next(new ApiError(422, \"imgs are required\"))\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let bricolLocation = [lang, lat] //modify location \n            req.body.location = bricolLocation;\n            req.body.user = req.user._id;\n            req.body.dueDate = parseInt(req.body.dueDate)\n\n            let newDoc = await Bricol.create(req.body);\n            let createdDoc = await Bricol.findById(newDoc.id)\n                .populate('user')\n                .populate('job')\n            return res.status(201).json(createdDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fetch all bricoles \n    async retriveAllBricol(req, res, next) {\n        try {\n            let { vehicleToWork, job, bricolerGender, startPrice, endPrice } = req.query\n            let query = {};\n            //filter by jobs\n            if (job) {\n                job = job.split(',');\n                if (job.length > 1)\n                    query.job = { $in: job };\n                else\n                    query.job = job[0];\n            }\n            //filter by vehicleToWork\n            if (vehicleToWork) {\n                vehicleToWork = vehicleToWork.split(',');\n                if (vehicleToWork.length > 1)\n                    query.vehicleToWork = { $in: vehicleToWork };\n                else\n                    query.vehicleToWork = vehicleToWork[0];\n            }\n            //filter by bricolerGender\n            if (bricolerGender)\n                query.bricolerGender = bricolerGender;\n            //filteration by start & end price [budget]\n            if (startPrice)\n                query.budget = { $gte: +startPrice };\n            if (endPrice)\n                query.budget = { ...query.budget, $lte: +endPrice };\n            //search by word in title of bricol \n            if (req.query.q) {\n                const matchQueryRegx = new RegExp(escapeRegExp(req.query.q), 'i')\n                query.title = matchQueryRegx;\n            }\n\n            //sorted docs\n            let sort = {}\n            if (req.query.maxPrice) {\n                sort.budget = -1;\n                sort.creationDate = -1;\n            }\n\n            if (req.query.minPrice) {\n                sort.budget = 1;\n                sort.creationDate = -1;\n            }\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let allDocs = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .skip((page - 1) * limit)\n                .limit(limit).sort(sort)\n            let count = await Bricol.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //validation input of calulate price \n    validateBodyOfCalulateDisance() {\n        return [\n            body(\"bricol\").exists().withMessage(\"bricol location is required\"),\n            body(\"user\").exists().withMessage(\"user location is required\")\n        ]\n    },\n    //calculate distance between bricole and user \n    async calculateDistance(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            //first locattion point\n            let lang1 = parseFloat(req.body.bricol.lang);\n            let lat1 = parseFloat(req.body.bricol.lat);\n            //scound location point\n            let lang2 = parseFloat(req.body.user.lang);\n            let lat2 = parseFloat(req.body.user.lat);\n\n            let R = 6371; // Radius of the earth in km\n            let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n            let dLon = deg2rad(lang2 - lang1);\n            let a =\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            let d = R * c; // Distance in km\n            console.log(d);\n            return res.status(200).json({ distanceInKm: d })\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive one bricol \n    async reriveOneBricolDetails(req, res, next) {\n        let bricolId = req.params.bricolId;\n        try {\n            let bricolDetails = await Bricol.findById(bricolId)\n                .populate('user')\n                .populate('job')\n\n            if (!bricolDetails)\n                return res.status(404).end();\n            return res.status(200).json(bricolDetails)\n        } catch (err) {\n            next(err)\n        }\n    },\n}\n\n"]}