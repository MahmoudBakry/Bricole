{"version":3,"sources":["../../../src/controllers/admin/admin.controller.js"],"names":["retriveSomeNumbers","req","res","next","user","type","ApiError","User","count","numberOfUsers","Bricol","numberOfBricolsInCity","BricolBtCity","numberOfBricolsBtCity","SpecialReques","numberOfSpecialRequest","Bid","bidType","numberOfBidInCity","numberOfBidBetweenCity","status","json","retriveAllUsers","find","populate","sort","creationDate","allDocs","fechAllBricols","query","fechAllBricolsBtCity","fetchCompleteProfileUsers","completed"],"mappings":"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","file":"admin.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport Bricol from '../../models/bricole.model';\nimport BricolBtCity from '../../models/bricol-bt-cities.model';\nimport Bid from '../../models/bid.model';\nimport SpecialReques from '../../models/special-request.model'\n\nimport ApiError from '../../helpers/ApiError';\nimport ApiResponse from '../../helpers/ApiResponse';\n\nexport default {\n\n    //retrive some statistics \n    async retriveSomeNumbers(req, res, next) {\n        try {\n            if (req.user.type !== \"ADMIN\")\n                return next(new ApiError(403, 'Not Admin User'))\n            //logic \n            let numberOfUsers = await User.count();\n            let numberOfBricolsInCity = await Bricol.count();\n            let numberOfBricolsBtCity = await BricolBtCity.count();\n            let numberOfSpecialRequest = await SpecialReques.count();\n            let numberOfBidInCity = await Bid.count({ bidType: 'bricol' });\n            let numberOfBidBetweenCity = await Bid.count({ bidType: 'bricol-bt-cities' });\n\n            return res.status(200).json({\n                numberOfUsers,\n                numberOfBricolsInCity,\n                numberOfBricolsBtCity,\n                numberOfBidInCity,\n                numberOfBidBetweenCity,\n                numberOfSpecialRequest\n            })\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fetch all users \n    async retriveAllUsers(req, res, next) {\n        try {\n            if (req.user.type !== \"ADMIN\")\n                return next(new ApiError(403, 'Not Admin User'))\n\n            let allDocs = await User.find()\n                .populate('jobs')\n                .populate('city')\n                .sort({ creationDate: -1 })\n            return res.status(200).json(allDocs)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //rertive all bricols \n    async fechAllBricols(req, res, next) {\n        try {\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status;\n\n            let allDocs = await Bricol.find(query)\n                .populate('user')\n                .populate('bricoler')\n                .populate('job').sort({ creationDate: -1 })\n            return res.status(200).json(allDocs);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //rertive all bricols \n    async fechAllBricolsBtCity(req, res, next) {\n        try {\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status;\n\n            let allDocs = await BricolBtCity.find(query)\n                .populate('user')\n                .populate('bricoler')\n                .populate('job').sort({ creationDate: -1 })\n            return res.status(200).json(allDocs);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all users that have complete profile \n    async fetchCompleteProfileUsers(req, res, next) {\n        try {\n            let allDocs = await User.find({ completed: true })\n                .populate('jobs')\n                .populate('city')\n                .sort({ creationDate: -1 })\n            return res.status(200).json(allDocs);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}