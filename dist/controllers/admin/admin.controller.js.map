{"version":3,"sources":["../../../src/controllers/admin/admin.controller.js"],"names":["retriveSomeNumbers","req","res","next","user","type","ApiError","User","count","numberOfUsers","Bricol","numberOfBricolsInCity","BricolBtCity","numberOfBricolsBtCity","Bid","bidType","numberOfBidInCity","numberOfBidBetweenCity","status","json","retriveAllUsers","find","populate","sort","creationDate","allDocs","fechAllBricols","fechAllBricolsBtCity","fetchCompleteProfileUsers","completed"],"mappings":"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","file":"admin.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport Bricol from '../../models/bricole.model';\nimport BricolBtCity from '../../models/bricol-bt-cities.model';\nimport Bid from '../../models/bid.model';\n\nimport ApiError from '../../helpers/ApiError';\nimport ApiResponse from '../../helpers/ApiResponse';\n\nexport default {\n\n    //retrive some statistics \n    async retriveSomeNumbers(req, res, next) {\n        try {\n            if (req.user.type !== \"ADMIN\")\n                return next(new ApiError(403, 'Not Admin User'))\n            //logic \n            let numberOfUsers = await User.count();\n            let numberOfBricolsInCity = await Bricol.count();\n            let numberOfBricolsBtCity = await BricolBtCity.count();\n            let numberOfBidInCity = await Bid.count({ bidType: 'bricol' });\n            let numberOfBidBetweenCity = await Bid.count({ bidType: 'bricol-bt-cities' });\n\n            return res.status(200).json({\n                numberOfUsers,\n                numberOfBricolsInCity,\n                numberOfBricolsBtCity,\n                numberOfBidInCity,\n                numberOfBidBetweenCity\n            })\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fetch all users \n    async retriveAllUsers(req, res, next) {\n        try {\n            if (req.user.type !== \"ADMIN\")\n                return next(new ApiError(403, 'Not Admin User'))\n\n            let allDocs = await User.find()\n                .populate('jobs')\n                .populate('city')\n                .sort({ creationDate: -1 })\n            return res.status(200).json(allDocs)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //rertive all bricols \n    async fechAllBricols(req, res, next) {\n        try {\n            let allDocs = await Bricol.find()\n                .populate('user')\n                .populate('bricoler')\n                .populate('job').sort({ creationDate: -1 })\n            return res.status(200).json(allDocs);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //rertive all bricols \n    async fechAllBricolsBtCity(req, res, next) {\n        try {\n            let allDocs = await BricolBtCity.find()\n                .populate('user')\n                .populate('bricoler')\n                .populate('job').sort({ creationDate: -1 })\n            return res.status(200).json(allDocs);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all users that have complete profile \n    async fetchCompleteProfileUsers(req, res, next) {\n        try {\n            let allDocs = await User.find({ completed: true })\n                .populate('jobs')\n                .populate('city')\n                .sort({ creationDate: -1 })\n            return res.status(200).json(allDocs);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}