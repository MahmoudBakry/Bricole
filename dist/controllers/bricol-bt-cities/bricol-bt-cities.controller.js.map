{"version":3,"sources":["../../../src/controllers/bricol-bt-cities/bricol-bt-cities.controller.js"],"names":["_","validateBody","isUpdate","validations","exists","withMessage","createNewBricole","req","res","next","validationErrors","array","length","ApiError","files","body","imgs","x","push","dueDate","parseInt","user","_id","BricolBtCities","create","newDoc","findById","id","populate","newDocDetails","status","json","retriveOneBricoleDetails","bricolId","params","docDetails","end","query","bricol","bidType","Bid","count","bidCount","retriveAllBricol","vehicleToWork","bricolerGender","startPrice","endPrice","split","$in","budget","$gte","$lte","q","matchQueryRegx","RegExp","title","sort","creationDate","maxPrice","minPrice","console","log","limit","page","find","skip","allDocs","result","bidQuery","countOfBids","send","ApiResponse","Math","ceil"],"mappings":"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","file":"bricol-bt-cities.controller.js","sourcesContent":["import BricolBtCities from '../../models/bricol-bt-cities.model';\nimport Bid from '../../models/bid.model';\nimport User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { toImgUrl } from '../../utils/index'\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\nimport * as _ from 'lodash';\n\n\nexport default {\n    //validation for create new bricol between cities\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"title\").exists().withMessage(\"title is required\"),\n            body(\"descripption\").exists().withMessage(\"descripption is required\"),\n            body(\"bricolerGender\").exists().withMessage(\"bricolerGender is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"dueDate\").exists().withMessage(\"dueDate is required\"),\n            body(\"from\").exists().withMessage(\"from city is required\"),\n            body(\"to\").exists().withMessage(\"to city location is required\"),\n            body(\"budget\").exists().withMessage(\"budget is required\"),\n        ];\n        return validations;\n    },\n\n    //add new bricole between cities \n    async createNewBricole(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            //prepare date \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            } else {\n                return next(new ApiError(422, \"imgs are required\"))\n            }\n            req.body.dueDate = parseInt(req.body.dueDate)\n            req.body.user = req.user._id;\n            let newDoc = await BricolBtCities.create(req.body);\n            let newDocDetails = await BricolBtCities.findById(newDoc.id)\n                .populate('user')\n            return res.status(201).json(newDocDetails);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive one bricole details \n    async retriveOneBricoleDetails(req, res, next) {\n        try {\n            let bricolId = req.params.bricolId;\n            let docDetails = await BricolBtCities.findById(bricolId)\n                .populate('user')\n                .populate('bricoler')\n\n            if (!docDetails)\n                return res.status(404).end();\n            let query = {\n                bricol: bricolId,\n                bidType: 'betweenCity'\n            }\n            let bidCount = await Bid.count(query)\n            return res.status(200).json({ bricol: docDetails, bidCount: bidCount });\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fetch all bricoles \n    async retriveAllBricol(req, res, next) {\n        try {\n            let { vehicleToWork, bricolerGender, startPrice, endPrice } = req.query\n            let query = {};\n\n            //filter by vehicleToWork\n            if (vehicleToWork) {\n                vehicleToWork = vehicleToWork.split(',');\n                if (vehicleToWork.length > 1)\n                    query.vehicleToWork = { $in: vehicleToWork };\n                else\n                    query.vehicleToWork = vehicleToWork[0];\n            }\n            //filter by bricolerGender\n            if (bricolerGender)\n                query.bricolerGender = bricolerGender;\n            //filteration by start & end price [budget]\n            if (startPrice)\n                query.budget = { $gte: +startPrice };\n            if (endPrice)\n                query.budget = { ...query.budget, $lte: +endPrice };\n            //search by word in title of bricol \n            if (req.query.q) {\n                const matchQueryRegx = new RegExp(escapeRegExp(req.query.q), 'i')\n                query.title = matchQueryRegx;\n            }\n\n            //filter only pendding bricole \n            query.status = \"pendding\"\n\n            //sorted docs\n            let sort = {}\n            sort.creationDate = -1;\n            if (req.query.maxPrice) {\n               \n                sort.budget = -1;\n            }\n\n            if (req.query.minPrice) {\n                console.log('d')\n                sort.budget = 1;\n            }\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let allDocs = await BricolBtCities.find(query)\n                .populate('user')\n                .skip((page - 1) * limit)\n                .limit(limit).sort(sort)\n\n            //prepare response \n            let result = [];\n            for (let x = 0; x < allDocs.length; x++) {\n                //get count of bids for each bricol\n                let bidQuery = {\n                    bricol: allDocs[x].id,\n                    bidType : 'bricol-bt-cities'\n                }\n                let countOfBids = await Bid.count(bidQuery)\n                result.push({ bricol: allDocs[x], countOfBids })\n            }\n\n            let count = await BricolBtCities.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n}"]}