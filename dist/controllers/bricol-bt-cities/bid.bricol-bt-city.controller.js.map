{"version":3,"sources":["../../../src/controllers/bricol-bt-cities/bid.bricol-bt-city.controller.js"],"names":["validateBody","validations","exists","withMessage","createNewBid","req","res","next","validationErrors","array","length","ApiError","Bricol","findById","params","bricolId","bricolDetails","status","end","query","user","body","bricol","bidType","Bid","findOne","bidExist","console","log","create","newBid","Notification","targetUser","subjectType","subject","text","newNoti","title","send","json","retriveAllBidsOfOneBricole","limit","parseInt","page","find","populate","skip","sort","creationDate","allDocs","count","ApiResponse","Math","ceil","accepptBid","bidId","bidDetails","BricolBtCities","userId","_id","bricoler","save","historyQuery","serviceType","service","id","History","historyDoc","makeBricolInProgress"],"mappings":"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","file":"bid.bricol-bt-city.controller.js","sourcesContent":["import Bid from '../../models/bid.model';\nimport BricolBtCities from '../../models/bricol-bt-cities.model';\nimport User from '../../models/user.model';\nimport History from '../../models/history.model';\nimport Notification from '../../models/notification.model';\n\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\n\n\nexport default {\n    //validation for create new bid\n    validateBody() {\n        let validations = [\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n            body(\"user\").exists().withMessage(\"user is required\"),\n            body('offerDescription').exists().withMessage(\"offerDescription  is required\"),\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n        ];\n        return validations;\n    },\n\n    //create new Bid for specific bricol \n    async createNewBid(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            let bricolDetails = await Bricol.findById(req.params.bricolId);\n            if (!bricolDetails)\n                return res.status(404).end();\n\n            let query = {\n                user: req.body.user,\n                bricol: req.params.bricolId,\n                bidType: 'bricol-bt-cities'\n            }\n            let bidExist = await Bid.findOne(query);\n            if (bidExist) {\n                console.log(bidExist)\n                return next(new ApiError(400, 'لا يمكنك إضافة عرضين لنفس الخدمة'));\n            }\n\n\n            let bricolId = req.params.bricolId;\n            req.body.bricol = bricolId;\n            req.body.bidType = 'bricol-bt-cities';\n            let newBid = await Bid.create(req.body);\n\n            //in app notification \n            let newNoti = await Notification.create({\n                targetUser: bricolDetails.user,\n                subjectType: 'bricol-bt-cities',\n                subject: req.params.bricolId,\n                text: 'لديك عرض جديد على خدمتك',\n            });\n\n            //send notifications\n            let title = \"لديك عرض جديد على خدمتك\";\n            let body = \"أضاف أحد مزودي الخدمات عرضًا جديدًا لخدمتك ،خذ جولة واقرأ هذا العرض\"\n            send(bricolDetails.user, title, body)\n\n            return res.status(201).json(newBid);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all bids under one bricole \n    async retriveAllBidsOfOneBricole(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n            let bricolId = req.params.bricolId;\n            let query = {}\n            query.bricol = bricolId;\n            query.bidType = 'bricol-bt-cities';\n\n            let allDocs = await Bid.find(query)\n                .populate('user')\n                .populate('bricol').skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await Bid.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //acceppt bid \n    async accepptBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await BricolBtCities.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricol details \n        bricolDetails.status = \"assigned\";\n        bricolDetails.bricoler = bidDetails.user;\n        await bricolDetails.save();\n        console.log(bricolDetails.bricoler)\n        //update bid \n        bidDetails.status = 'accepted';\n        await bidDetails.save();\n\n        //update bricole history \n        let historyQuery = {\n            serviceType: 'bricol-bt-cities',\n            service: bricolDetails.id,\n            user: bricolDetails.user,\n        }\n        let historyDoc = await History.findOne(historyQuery);\n        console.log(historyDoc)\n        historyDoc.status = \"assigned\";\n        historyDoc.bricoler = bidDetails.user;\n        await historyDoc.save();\n        console.log(await History.findOne(historyQuery));\n\n\n        //in app notification \n        let newNoti = await Notification.create({\n            targetUser: bidDetails.user,\n            subjectType: 'bid',\n            subject: bidDetails.id,\n            text: 'تم قبول عرضك من مالك الخدمة',\n        });\n\n        //send notifications\n        let title = \"تم قبول عرضك\";\n        let body = \"تم قبول عرضك من مالك الخدمة،اعمل بجد لكسب الثقة من الجميع\"\n        send(bidDetails.user, title, body)\n\n        //return result\n        return res.status(204).end();\n\n    },\n\n    //make bricole in progress  \n    async makeBricolInProgress(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await BricolBtCities.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n\n        //update bricol details \n        bricolDetails.status = \"inProgress\";\n        await bricolDetails.save();\n        console.log(bricolDetails.bricoler)\n\n        //update bricole history \n        let historyQuery = {\n            serviceType: 'bricol-bt-cities',\n            service: bricolDetails.id,\n            user: bricolDetails.user,\n        }\n        let historyDoc = await History.findOne(historyQuery);\n        console.log(historyDoc)\n        historyDoc.status = \"inProgress\";\n        historyDoc.bricoler = bidDetails.user;\n        await historyDoc.save();\n        console.log(await History.findOne(historyQuery));\n\n        //return result\n        return res.status(204).end();\n\n    },\n\n\n}"]}