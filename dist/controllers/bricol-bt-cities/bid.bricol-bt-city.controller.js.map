{"version":3,"sources":["../../../src/controllers/bricol-bt-cities/bid.bricol-bt-city.controller.js"],"names":["validateBody","validations","exists","withMessage","createNewBid","req","res","next","validationErrors","array","length","ApiError","bricolId","params","body","bricol","bidType","Bid","create","newBid","status","json"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAGe;AACX;AACAA,gBAFW,0BAEI;AACX,YAAIC,cAAc,CACd,iBAAK,MAAL,EAAaC,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CADc,EAEd,iBAAK,MAAL,EAAaD,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CAFc,EAGd,iBAAK,kBAAL,EAAyBD,MAAzB,GAAkCC,WAAlC,CAA8C,+BAA9C,CAHc,EAId,iBAAK,MAAL,EAAaD,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CAJc,CAAlB;AAMA,eAAOF,WAAP;AACH,KAVU;;;AAYX;AACMG,gBAbK,wBAaQC,GAbR,EAaaC,GAbb,EAakBC,IAblB,EAawB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBC,4CAFqB,GAEF,6BAAiBH,GAAjB,EAAsBI,KAAtB,EAFE;;AAAA,kCAGvBD,iBAAiBE,MAAjB,GAA0B,CAHH;AAAA;AAAA;AAAA;;AAAA,6DAIhBH,KAAK,IAAII,kBAAJ,CAAa,GAAb,EAAkBH,gBAAlB,CAAL,CAJgB;;AAAA;AAMvBI,oCANuB,GAMZP,IAAIQ,MAAJ,CAAWD,QANC;;AAO3BP,gCAAIS,IAAJ,CAASC,MAAT,GAAkBH,QAAlB;AACAP,gCAAIS,IAAJ,CAASE,OAAT,GAAmB,kBAAnB;AAR2B;AAAA,mCASRC,cAAIC,MAAJ,CAAWb,IAAIS,IAAf,CATQ;;AAAA;AASvBK,kCATuB;AAAA,6DAUpBb,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB,CAVoB;;AAAA;AAAA;AAAA;;AAY3BZ;;AAZ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclC;AA3BU,C","file":"bid.bricol-bt-city.controller.js","sourcesContent":["import Bid from '../../models/bid.model';\nimport BricolBtCities from '../../models/bricol-bt-cities.model';\nimport User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\n\n\nexport default {\n    //validation for create new bid\n    validateBody() {\n        let validations = [\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n            body(\"user\").exists().withMessage(\"user is required\"),\n            body('offerDescription').exists().withMessage(\"offerDescription  is required\"),\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n        ];\n        return validations;\n    },\n\n    //create new Bid for specific bricol \n    async createNewBid(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            let bricolId = req.params.bricolId;\n            req.body.bricol = bricolId;\n            req.body.bidType = 'bricol-bt-cities';\n            let newBid = await Bid.create(req.body);\n            return res.status(201).json(newBid);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}