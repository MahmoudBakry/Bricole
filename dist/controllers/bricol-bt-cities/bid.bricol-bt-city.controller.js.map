{"version":3,"sources":["../../../src/controllers/bricol-bt-cities/bid.bricol-bt-city.controller.js"],"names":["validateBody","validations","exists","withMessage","createNewBid","req","res","next","validationErrors","array","length","ApiError","query","user","body","bricol","params","bricolId","bidType","Bid","findOne","bidExist","console","log","create","newBid","status","json","retriveAllBidsOfOneBricole","limit","parseInt","page","find","populate","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil","accepptBid","bidId","findById","bidDetails","BricolBtCities","bricolDetails","userId","_id","bricoler","save","end"],"mappings":"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","file":"bid.bricol-bt-city.controller.js","sourcesContent":["import Bid from '../../models/bid.model';\nimport BricolBtCities from '../../models/bricol-bt-cities.model';\nimport User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\n\n\nexport default {\n    //validation for create new bid\n    validateBody() {\n        let validations = [\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n            body(\"user\").exists().withMessage(\"user is required\"),\n            body('offerDescription').exists().withMessage(\"offerDescription  is required\"),\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n        ];\n        return validations;\n    },\n\n    //create new Bid for specific bricol \n    async createNewBid(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            let query = {\n                user: req.body.user,\n                bricol: req.params.bricolId,\n                bidType: 'bricol-bt-cities'\n            }\n            let bidExist = await Bid.findOne(query);\n            if (bidExist) {\n                console.log(bidExist)\n                return next(new ApiError(400, 'لا يمكنك إضافة عرضين لنفس الخدمة'));\n            }\n\n\n            let bricolId = req.params.bricolId;\n            req.body.bricol = bricolId;\n            req.body.bidType = 'bricol-bt-cities';\n            let newBid = await Bid.create(req.body);\n            return res.status(201).json(newBid);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all bids under one bricole \n    async retriveAllBidsOfOneBricole(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n            let bricolId = req.params.bricolId;\n            let query = {}\n            query.bricol = bricolId;\n            query.bidType = 'bricol-bt-cities';\n\n            let allDocs = await Bid.find(query)\n                .populate('user')\n                .populate('bricol').skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await Bid.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //acceppt bid \n    async accepptBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await BricolBtCities.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricol details \n        bricolDetails.status = \"assigned\";\n        bricolDetails.bricoler = bidDetails.user;\n        await bricolDetails.save();\n        console.log(bricolDetails.bricoler)\n        //update bid \n        bidDetails.status = 'accepted';\n        await bidDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n\n}"]}