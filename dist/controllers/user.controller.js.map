{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","config","generateToken","jwt","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateBody","isUpdate","exists","withMessage","custom","value","req","user","phone","userQuery","_id","$ne","userPhoneQuery","User","findOne","signUp","res","next","validationErrors","array","length","ApiError","file","body","img","lang","lat","userLocation","location","birthDate","parseInt","create","createdUser","findById","populate","newUser","status","send","token","signin","userDetails","console","log","type","fetchAllBricolOfOneUser","limit","query","page","userId","params","end","Bricol","find","skip","sort","creationDate","allBricols","result","x","bricol","bidType","Bid","count","countBids","push","ApiResponse","Math","ceil","fetchAllBricolOfOneBricoler","bricolerId","bricoler","retriveAllBricolsBtCityOfUser","BricolBtCity","allDocs","bidQuery","countOfBids","retriveAllBricolsBtCityOfBricoler","countNumberOfBricolsOfUser","penddingBricols","assignedBricols","inProgressBricols","doneBricols","incityBricols","btQuery","allBtBricols","penddingBtBricols","assignedBtBricols","inProgressBtBricols","doneBtBricols","betweenCityBricols","SpecialRequest","specialRequest","json","files","portofolio","findByIdAndUpdate","new","completed","save","newObject"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Bricol from '../models/bricole.model';\nimport BricolBtCity from '../models/bricol-bt-cities.model';\nimport Bid from '../models/bid.model';\nimport SpecialRequest from '../models/special-request.model';\n\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { body, validationResult } from 'express-validator/check';\nimport mongoose, { Schema } from \"mongoose\";\nimport ApiError from '../helpers/ApiError'\nimport { multerSaveTo } from '../services/multer'\nimport { toImgUrl } from '../utils/index'\nimport ApiResponse from '../helpers/ApiResponse'\n\n\n\nconst { jwtSecret } = config;\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n    }, jwtSecret, { expiresIn: '10000s' })\n}\n\n\n//function check phone regular exression \n//this function support \n// +XX-XXXX-XXXX  \n// +XX.XXXX.XXXX  \n// +XX XXXX XXXX \nconst checkPhone = inputtxt => {\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n    if (inputtxt.match(phoneno)) {\n        return true;\n    }\n    else {\n        throw new Error(\"invalid phone\")\n    }\n}\nexport default {\n    validateBody(isUpdate = false) {\n        return [\n            body(\"userName\").exists().withMessage(\"userName is required\"),\n            body(\"jobs\").exists().withMessage(\"jobs is required\"),\n            body(\"lang\").exists().withMessage(\"lang is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"firstName\").exists().withMessage(\"firstName is required\"),\n            body(\"lastName\").exists().withMessage(\"lastName is required\"),\n            body(\"city\").exists().withMessage(\"city is required\"),\n            body(\"password\").exists().withMessage(\"password is required\"),\n            body(\"phone\").exists().withMessage(\"phone is requires\")\n                //make custome validation to phone to check on phone[unique, isPhone]\n                .custom(async (value, { req }) => {\n                    //call phone checking pattren function \n                    checkPhone(value);\n                    if (isUpdate && req.user.phone == value)\n                        userQuery._id = { $ne: req.user._id };\n                    let userPhoneQuery = { phone: value };\n                    let user = await User.findOne(userPhoneQuery);\n                    if (user)\n                        throw new Error('phone already exists');\n                    else\n                        return true\n                })\n        ];\n    },\n    //signup logic \n    async signUp(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            }\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let userLocation = [lang, lat] //modify location \n            req.body.location = userLocation;\n\n            req.body.birthDate = parseInt(req.body.birthDate)\n            let createdUser = await User.create(req.body);\n            let newUser = await User.findById(createdUser.id)\n                .populate('city')\n                .populate('jobs')\n            res.status(201).send({ user: newUser, token: generateToken(createdUser.id) });\n        } catch (err) {\n            next(err);\n        }\n    },\n    //sign in logic \n    async signin(req, res, next) {\n        let userDetails = req.user; // Passport\n        console.log(userDetails.type)\n        let user = await User.findById(userDetails.id)\n            .populate('city')\n            .populate('jobs')\n        res.send({ user, token: generateToken(userDetails.id) });\n    },\n\n    //retrive all bricols under one user \n    async fetchAllBricolOfOneUser(req, res, next) {\n        try {\n            console.log('s')\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let userId = req.params.userId\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status\n            query.user = userId\n            let allBricols = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            let result = []\n            for (let x = 0; x < allBricols.length; x++) {\n                let query = {}\n                query.bricol = allBricols[x].id;\n                query.bidType = 'inCity'\n                let countBids = await Bid.count(query);\n                result.push({ bricol: allBricols[x], countBids: countBids })\n            }\n\n            let count = await Bricol.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all bricols under one bricoler \n    async fetchAllBricolOfOneBricoler(req, res, next) {\n        try {\n            console.log('s')\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let bricolerId = req.params.bricolerId;\n\n            let userDetails = await User.findById(bricolerId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status\n            query.bricoler = bricolerId\n            let allBricols = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            let result = []\n            for (let x = 0; x < allBricols.length; x++) {\n                let query = {}\n                query.bricol = allBricols[x].id;\n                query.bidType = 'inCity'\n                let countBids = await Bid.count(query);\n                result.push({ bricol: allBricols[x], countBids: countBids })\n            }\n\n            let count = await Bricol.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all bricoles between city under one user \n    async retriveAllBricolsBtCityOfUser(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let query = {}\n            query.user = userId;\n            if (req.query.status)\n                query.status = req.query.status\n            let allDocs = await BricolBtCity.find(query)\n                .populate('user')\n                .populate('job')\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            //prepare response \n            let result = [];\n            for (let x = 0; x < allDocs.length; x++) {\n                //get count of bids for each bricol\n                let bidQuery = {\n                    bricol: allDocs[x].id,\n                    bidType: 'bricol-bt-cities'\n                }\n                let countOfBids = await Bid.count(bidQuery)\n                result.push({ bricol: allDocs[x], countOfBids })\n            }\n\n            let count = await BricolBtCity.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all bricols between city under one bricoler \n    async retriveAllBricolsBtCityOfBricoler(req, res, next) {\n        try {\n            let bricolerId = req.params.bricolerId;\n            //check if bricoler exist \n            let userDetails = await User.findById(bricolerId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let query = {}\n            query.bricoler = bricolerId;\n            if (req.query.status)\n                query.status = req.query.status;\n\n            let allDocs = await BricolBtCity.find(query)\n                .populate('user')\n                .populate('job')\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await BricolBtCity.count(query);\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //count #bricols under one User \n    async countNumberOfBricolsOfUser(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            //incity Bricols \n            let query = {}\n            query.user = userId;\n            let allBricols = await Bricol.count(query);\n            query.status = 'pendding'\n            let penddingBricols = await Bricol.count(query);\n            query.status = 'assigned';\n            let assignedBricols = await Bricol.count(query);\n            query.status = 'inProgress';\n            let inProgressBricols = await Bricol.count(query);\n            query.status = 'done';\n            let doneBricols = await Bricol.count(query);\n            let result = {}\n            result.incityBricols = {\n                allBricols,\n                penddingBricols,\n                assignedBricols,\n                inProgressBricols,\n                doneBricols\n            }\n\n            //between city bricols \n            let btQuery = {}\n            btQuery.user = userId;\n            let allBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'pendding'\n            let penddingBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'assigned';\n            let assignedBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'inProgress';\n            let inProgressBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'done';\n            let doneBtBricols = await BricolBtCity.count(btQuery);\n            result.betweenCityBricols = {\n                allBtBricols,\n                penddingBtBricols,\n                assignedBtBricols,\n                inProgressBtBricols,\n                doneBtBricols\n            }\n\n            let specialRequest = await SpecialRequest.count({ user: userId });\n            result.specialRequest = specialRequest;\n\n            return res.status(200).json(result);\n        } catch (err) {\n            next(err)\n        }\n    },\n    //count #bricols under one User \n    async countNumberOfBricolsOfUser(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            //incity Bricols \n            let query = {}\n            query.user = userId;\n            let allBricols = await Bricol.count(query);\n            query.status = 'pendding'\n            let penddingBricols = await Bricol.count(query);\n            query.status = 'assigned';\n            let assignedBricols = await Bricol.count(query);\n            query.status = 'inProgress';\n            let inProgressBricols = await Bricol.count(query);\n            query.status = 'done';\n            let doneBricols = await Bricol.count(query);\n            let result = {}\n            result.incityBricols = {\n                allBricols,\n                penddingBricols,\n                assignedBricols,\n                inProgressBricols,\n                doneBricols\n            }\n\n            //between city bricols \n            let btQuery = {}\n            btQuery.user = userId;\n            let allBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'pendding'\n            let penddingBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'assigned';\n            let assignedBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'inProgress';\n            let inProgressBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'done';\n            let doneBtBricols = await BricolBtCity.count(btQuery);\n            result.betweenCityBricols = {\n                allBtBricols,\n                penddingBtBricols,\n                assignedBtBricols,\n                inProgressBtBricols,\n                doneBtBricols\n            }\n\n            let specialRequest = await SpecialRequest.count({ user: userId });\n            result.specialRequest = specialRequest;\n            return res.status(200).json(result);\n        } catch (err) {\n            next(err)\n        }\n    },\n    //count #bricols under one Bricoler \n    async countNumberOfBricolsOfBricoler(req, res, next) {\n        try {\n            let bricolerId = req.params.bricolerId;\n            let userDetails = await User.findById(bricolerId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            //incity Bricols \n            let query = {}\n            query.bricoler = bricolerId;\n            let allBricols = await Bricol.count(query);\n            query.status = 'pendding'\n            let penddingBricols = await Bricol.count(query);\n            query.status = 'assigned';\n            let assignedBricols = await Bricol.count(query);\n            query.status = 'inProgress';\n            let inProgressBricols = await Bricol.count(query);\n            query.status = 'done';\n            let doneBricols = await Bricol.count(query);\n            let result = {}\n            result.incityBricols = {\n                allBricols,\n                assignedBricols,\n                inProgressBricols,\n                doneBricols\n            }\n\n            //between city bricols \n            let btQuery = {}\n            btQuery.bricoler = bricolerId;\n            let allBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'pendding'\n            let penddingBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'assigned';\n            let assignedBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'inProgress';\n            let inProgressBtBricols = await BricolBtCity.count(btQuery);\n            btQuery.status = 'done';\n            let doneBtBricols = await BricolBtCity.count(btQuery);\n            result.betweenCityBricols = {\n                allBtBricols,\n                assignedBtBricols,\n                inProgressBtBricols,\n                doneBtBricols\n            }\n\n            let specialRequest = await SpecialRequest.count({ bricoler: bricolerId });\n            result.specialRequest = specialRequest;\n\n            return res.status(200).json(result);\n        } catch (err) {\n            next(err)\n        }\n    },\n    //fetch user by id\n    async retriveUserDetails(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId)\n                .populate('jobs')\n                .populate('city')\n            if (!userDetails)\n                return res.status(404).end();\n\n            return res.status(200).json(userDetails);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //validation of complete profile logic\n    validateCompleteProfileBody(isUpdate = false) {\n        return [\n            body(\"about\").exists().withMessage(\"about is required\"),\n            //note express validator don't work with mutet\n            // body(\"portofolio\").exists().withMessage(\"portofolio is required\"),\n        ];\n    },\n    //complete profile of user \n    async completeProfile(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            //prepare data \n            if (req.files.length > 0) {\n                req.body.portofolio = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.portofolio.push(await toImgUrl(req.files[x]))\n                }\n            }\n            await User.findByIdAndUpdate(userId, req.body, { new: true });\n            //assign new attributed value to user object\n            // userDetails.about = req.body.about;\n            // userDetails.portofolio = req.body.portofolio;\n            userDetails.completed = 'true';\n            await userDetails.save();\n            //return new user \n            let newObject = await User.findById(userId)\n                .populate('city')\n                .populate('jobs')\n            return res.status(200).json(newObject);\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}