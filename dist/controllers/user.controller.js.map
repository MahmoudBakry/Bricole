{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","config","generateToken","jwt","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateBody","isUpdate","exists","withMessage","custom","value","req","user","phone","userQuery","_id","$ne","userPhoneQuery","User","findOne","signUp","res","next","validationErrors","array","length","ApiError","file","body","img","birthDate","parseInt","create","createdUser","findById","populate","newUser","status","send","token","signin","console","log","type","userDetails"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { body, validationResult } from 'express-validator/check';\nimport mongoose, { Schema } from \"mongoose\";\nimport ApiError from '../helpers/ApiError'\nimport { multerSaveTo } from '../services/multer'\nimport { toImgUrl } from '../utils/index'\nimport ApiResponse from '../helpers/ApiResponse'\n\n\nconst { jwtSecret } = config;\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n    }, jwtSecret, { expiresIn: '10000s' })\n}\n\n\n//function check phone regular exression \n//this function support \n// +XX-XXXX-XXXX  \n// +XX.XXXX.XXXX  \n// +XX XXXX XXXX \nconst checkPhone = inputtxt => {\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n    if (inputtxt.match(phoneno)) {\n        return true;\n    }\n    else {\n        throw new Error(\"invalid phone\")\n    }\n}\nexport default {\n    validateBody(isUpdate = false) {\n        return [\n            body(\"userName\").exists().withMessage(\"userName is required\"),\n            body(\"jobs\").exists().withMessage(\"jobs is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"firstName\").exists().withMessage(\"firstName is required\"),\n            body(\"lastName\").exists().withMessage(\"lastName is required\"),\n            body(\"city\").exists().withMessage(\"city is required\"),\n            body(\"password\").exists().withMessage(\"password is required\"),\n            body(\"phone\").exists().withMessage(\"phone is requires\")\n                //make custome validation to phone to check on phone[unique, isPhone]\n                .custom(async (value, { req }) => {\n                    //call phone checking pattren function \n                    checkPhone(value);\n                    if (isUpdate && req.user.phone == value)\n                        userQuery._id = { $ne: req.user._id };\n                    let userPhoneQuery = { phone: value };\n                    let user = await User.findOne(userPhoneQuery);\n                    if (user)\n                        throw new Error('phone already exists');\n                    else\n                        return true\n                })\n        ];\n    },\n    //signup logic \n    async signUp(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            }\n            req.body.birthDate = parseInt(req.body.birthDate)\n            let createdUser = await User.create(req.body);\n            let newUser = await User.findById(createdUser.id)\n                .populate('city')\n                .populate('jobs')\n            res.status(201).send({ user: newUser, token: generateToken(createdUser.id) });\n        } catch (err) {\n            next(err);\n        }\n    },\n    //sign in logic \n    async signin(req, res, next) {\n        let user = req.user; // Passport\n        console.log(user.type)\n        let userDetails = await User.findById(user.id)\n            .populate('city')\n            .populate('jobs')\n        res.send({ userDetails, token: generateToken(user.id) });\n    },\n\n\n}"]}