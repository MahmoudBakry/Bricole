{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","config","generateToken","jwt","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateBody","isUpdate","exists","withMessage","custom","value","req","user","phone","userQuery","_id","$ne","userPhoneQuery","User","findOne","signUp","res","next","validationErrors","array","length","ApiError","file","body","img","lang","lat","userLocation","location","birthDate","parseInt","create","createdUser","findById","populate","newUser","status","send","token","signin","console","log","type","userDetails","fetchAllBricolOfOneUser","limit","query","page","userId","params","Bricol","find","skip","sort","creationDate","allBricols","result","x","Bid","count","bricol","countBids","push","ApiResponse","Math","ceil","fetchAllBricolOfOneBricoler","bricolerId","bricoler"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Bricol from '../models/bricole.model';\nimport Bid from '../models/bid.model';\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { body, validationResult } from 'express-validator/check';\nimport mongoose, { Schema } from \"mongoose\";\nimport ApiError from '../helpers/ApiError'\nimport { multerSaveTo } from '../services/multer'\nimport { toImgUrl } from '../utils/index'\nimport ApiResponse from '../helpers/ApiResponse'\n\n\nconst { jwtSecret } = config;\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n    }, jwtSecret, { expiresIn: '10000s' })\n}\n\n\n//function check phone regular exression \n//this function support \n// +XX-XXXX-XXXX  \n// +XX.XXXX.XXXX  \n// +XX XXXX XXXX \nconst checkPhone = inputtxt => {\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n    if (inputtxt.match(phoneno)) {\n        return true;\n    }\n    else {\n        throw new Error(\"invalid phone\")\n    }\n}\nexport default {\n    validateBody(isUpdate = false) {\n        return [\n            body(\"userName\").exists().withMessage(\"userName is required\"),\n            body(\"jobs\").exists().withMessage(\"jobs is required\"),\n            body(\"lang\").exists().withMessage(\"lang is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"vehicleToWork\").exists().withMessage(\"vehicleToWork is required\"),\n            body(\"firstName\").exists().withMessage(\"firstName is required\"),\n            body(\"lastName\").exists().withMessage(\"lastName is required\"),\n            body(\"city\").exists().withMessage(\"city is required\"),\n            body(\"password\").exists().withMessage(\"password is required\"),\n            body(\"phone\").exists().withMessage(\"phone is requires\")\n                //make custome validation to phone to check on phone[unique, isPhone]\n                .custom(async (value, { req }) => {\n                    //call phone checking pattren function \n                    checkPhone(value);\n                    if (isUpdate && req.user.phone == value)\n                        userQuery._id = { $ne: req.user._id };\n                    let userPhoneQuery = { phone: value };\n                    let user = await User.findOne(userPhoneQuery);\n                    if (user)\n                        throw new Error('phone already exists');\n                    else\n                        return true\n                })\n        ];\n    },\n    //signup logic \n    async signUp(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            }\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let userLocation = [lang, lat] //modify location \n            req.body.location = userLocation;\n\n            req.body.birthDate = parseInt(req.body.birthDate)\n            let createdUser = await User.create(req.body);\n            let newUser = await User.findById(createdUser.id)\n                .populate('city')\n                .populate('jobs')\n            res.status(201).send({ user: newUser, token: generateToken(createdUser.id) });\n        } catch (err) {\n            next(err);\n        }\n    },\n    //sign in logic \n    async signin(req, res, next) {\n        let user = req.user; // Passport\n        console.log(user.type)\n        let userDetails = await User.findById(user.id)\n            .populate('city')\n            .populate('jobs')\n        res.send({ userDetails, token: generateToken(user.id) });\n    },\n\n    //retrive all bricols under one user \n    async fetchAllBricolOfOneUser(req, res, next) {\n        try {\n            console.log('s')\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let userId = req.params.userId\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status\n            query.user = userId\n            let allBricols = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            let result = []\n            for (let x = 0; x < allBricols.length; x++) {\n                let countBids = await Bid.count({ bricol: allBricols[x].id });\n                result.push({ bricol: allBricols[x], countBids: countBids })\n            }\n\n            let count = await Bricol.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all bricols under one bricoler \n    async fetchAllBricolOfOneBricoler(req, res, next) {\n        try {\n            console.log('s')\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let bricolerId = req.params.bricolerId\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status\n            query.bricoler = bricolerId\n            let allBricols = await Bricol.find(query)\n                .populate('user')\n                .populate('job')\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            let result = []\n            for (let x = 0; x < allBricols.length; x++) {\n                let countBids = await Bid.count({ bricol: allBricols[x].id });\n                result.push({ bricol: allBricols[x], countBids: countBids })\n            }\n\n            let count = await Bricol.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n\n\n}"]}