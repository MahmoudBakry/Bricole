{"version":3,"sources":["../../src/controllers/bid.controller.js"],"names":["validateBody","validations","exists","withMessage","createNewBid","req","res","next","validationErrors","array","length","ApiError","query","user","body","bricol","params","bricolId","bidType","Bid","findOne","bidExist","console","log","create","newBid","status","json","retriveAllBidsForBricol","limit","parseInt","page","find","populate","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil","countNumberOfBidToONeBricol","Bricol","findById","bricolDetails","end","bidDetails","bidId","accepptBid","_id","userId","bricoler","save","historyQuery","serviceType","service","id","History","historyDoc","refuseBid","makeBricolInProgress"],"mappings":"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","file":"bid.controller.js","sourcesContent":["import Bid from '../models/bid.model';\nimport Bricol from '../models/bricole.model';\nimport User from '../models/user.model';\nimport History from '../models/history.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\n\nexport default {\n\n    //validation for create new bid\n    validateBody() {\n        let validations = [\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n            body(\"user\").exists().withMessage(\"user is required\"),\n            body('offerDescription').exists().withMessage(\"offerDescription  is required\"),\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n        ];\n        return validations;\n    },\n\n    //create new Bid for specific bricol \n    async createNewBid(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            let query = {\n                user: req.body.user,\n                bricol: req.params.bricolId,\n                bidType: 'bricol'\n            }\n            let bidExist = await Bid.findOne(query);\n            if (bidExist) {\n                console.log(bidExist)\n                return next(new ApiError(400, 'لا يمكنك إضافة عرضين لنفس الخدمة'));\n            }\n\n\n            let bricolId = req.params.bricolId;\n            req.body.bricol = bricolId;\n            req.body.bidType = 'bricol';\n            let newBid = await Bid.create(req.body);\n            return res.status(201).json(newBid);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all Bid for one Bricol \n    async retriveAllBidsForBricol(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n            let bricolId = req.params.bricolId;\n            let query = {}\n            query.bricol = bricolId;\n            query.bidType = 'bricol';\n            let allDocs = await Bid.find(query)\n                .populate('user')\n                .populate('bricol').skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await Bid.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //count number of bids to specific bricol\n    async countNumberOfBidToONeBricol(req, res, next) {\n        try {\n            let bricolId = req.params.bricolId;\n            let query = {};\n            query.bricol = bricolId;\n            query.bidType = 'bricol'\n            let bricolDetails = await Bricol.findById(bricolId);\n            if (!bricolDetails)\n                return res.status(404).end();\n            let count = await Bid.count({ bricol: bricolId })\n            return res.status(200).json({ count });\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive Bid Details \n    async bidDetails(req, res, next) {\n        try {\n            let bidId = req.params.bidId;\n            let bidDetails = await Bid.findById(bidId)\n                .populate('user')\n                .populate('bricol')\n            if (!bidDetails)\n                return next(new ApiError(404));\n            console.log(bidDetails)\n            return res.status(200).json(bidDetails)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //acceppt bid \n    async accepptBid(req, res, next) {\n        console.log(req.user._id)\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //  update bricol details \n        bricolDetails.status = \"assigned\";\n        bricolDetails.bricoler = bidDetails.user;\n        await bricolDetails.save();\n        console.log(bricolDetails.bricoler)\n        //update bid \n        bidDetails.status = 'accepted';\n        await bidDetails.save();\n\n        //update bricole history \n        let historyQuery = {\n            serviceType: 'bricol',\n            service: bricolDetails.id,\n            user: bricolDetails.user,\n        }\n        let historyDoc = await History.findOne(historyQuery);\n        console.log(historyDoc)\n        historyDoc.status = \"assigned\";\n        historyDoc.bricoler = bidDetails.user;\n        await historyDoc.save();\n        console.log( await History.findOne(historyQuery));\n        //return result\n        return res.status(204).end();\n\n    },\n\n\n    //refuse bid \n    async refuseBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bid \n        bidDetails.status = 'refused';\n        await bidDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n\n    //make bricole in progress  \n    async makeBricolInProgress(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n\n        let userId = req.user._id;\n        console.log(typeof (userId))\n        if (!(userId == bricolDetails.bricoler))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricole by bricoler  \n        bricolDetails.status = 'inProgress';\n        await bricolDetails.save();\n\n        //update bricole history \n        let historyQuery = {\n            serviceType: 'bricol',\n            service: bricolDetails.id,\n            user: bricolDetails.user,\n        }\n        let historyDoc = await History.findOne(historyQuery);\n        console.log(historyDoc)\n        historyDoc.status = \"inProgress\";\n        await historyDoc.save();\n        \n        //return responce \n        return res.status(204).end();\n\n    },\n\n}\n\n\n"]}