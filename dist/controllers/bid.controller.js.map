{"version":3,"sources":["../../src/controllers/bid.controller.js"],"names":["validateBody","validations","exists","withMessage","createNewBid","req","res","next","validationErrors","array","length","ApiError","bricolId","params","body","bricol","bidType","Bid","create","newBid","status","json","retriveAllBidsForBricol","limit","parseInt","query","page","find","populate","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil","countNumberOfBidToONeBricol","Bricol","findById","bricolDetails","end","bidDetails","bidId","console","log","accepptBid","userId","user","_id","bricoler","save","refuseBid","makeBricolInProgress"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe;;AAEX;AACAA,gBAHW,0BAGI;AACX,YAAIC,cAAc,CACd,iBAAK,MAAL,EAAaC,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CADc,EAEd,iBAAK,MAAL,EAAaD,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CAFc,EAGd,iBAAK,kBAAL,EAAyBD,MAAzB,GAAkCC,WAAlC,CAA8C,+BAA9C,CAHc,EAId,iBAAK,MAAL,EAAaD,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CAJc,CAAlB;AAMA,eAAOF,WAAP;AACH,KAXU;;;AAaX;AACMG,gBAdK,wBAcQC,GAdR,EAcaC,GAdb,EAckBC,IAdlB,EAcwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBC,4CAFqB,GAEF,6BAAiBH,GAAjB,EAAsBI,KAAtB,EAFE;;AAAA,kCAGvBD,iBAAiBE,MAAjB,GAA0B,CAHH;AAAA;AAAA;AAAA;;AAAA,6DAIhBH,KAAK,IAAII,kBAAJ,CAAa,GAAb,EAAkBH,gBAAlB,CAAL,CAJgB;;AAAA;AAMvBI,oCANuB,GAMZP,IAAIQ,MAAJ,CAAWD,QANC;;AAO3BP,gCAAIS,IAAJ,CAASC,MAAT,GAAkBH,QAAlB;AACAP,gCAAIS,IAAJ,CAASE,OAAT,GAAmB,QAAnB;AAR2B;AAAA,mCASRC,cAAIC,MAAJ,CAAWb,IAAIS,IAAf,CATQ;;AAAA;AASvBK,kCATuB;AAAA,6DAUpBb,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB,CAVoB;;AAAA;AAAA;AAAA;;AAY3BZ;;AAZ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclC,KA5BU;;;AA8BX;AACMe,2BA/BK,mCA+BmBjB,GA/BnB,EA+BwBC,GA/BxB,EA+B6BC,IA/B7B,EA+BmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhCgB,iCAFgC,GAExBC,SAASnB,IAAIoB,KAAJ,CAAUF,KAAnB,KAA6B,EAFL;AAGhCG,gCAHgC,GAGzBrB,IAAIoB,KAAJ,CAAUC,IAAV,IAAkB,CAHO;AAIlCd,oCAJkC,GAIvBP,IAAIQ,MAAJ,CAAWD,QAJY;AAKlCa,iCALkC,GAK1B,EAL0B;;AAMtCA,kCAAMV,MAAN,GAAeH,QAAf;AACAa,kCAAMT,OAAN,GAAgB,QAAhB;AAPsC;AAAA,mCAQlBC,cAAIU,IAAJ,CAASF,KAAT,EACfG,QADe,CACN,MADM,EAEfA,QAFe,CAEN,QAFM,EAEIC,IAFJ,CAES,CAACH,OAAO,CAAR,IAAaH,KAFtB,EAGfA,KAHe,CAGTA,KAHS,EAGFO,IAHE,CAGG,EAAEC,cAAc,CAAC,CAAjB,EAHH,CARkB;;AAAA;AAQlCC,mCARkC;AAAA;AAAA,mCAYpBf,cAAIgB,KAAJ,CAAUR,KAAV,CAZoB;;AAAA;AAYlCQ,iCAZkC;AAAA,8DAc/B3B,IAAI4B,IAAJ,CAAS,IAAIC,qBAAJ,CACZH,OADY,EAEZN,IAFY,EAGZU,KAAKC,IAAL,CAAUJ,QAAQV,KAAlB,CAHY,EAIZA,KAJY,EAKZU,KALY,EAMZ5B,GANY,CAAT,CAd+B;;AAAA;AAAA;AAAA;;AAwBtCE;;AAxBsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B7C,KAzDU;;;AA2DX;AACM+B,+BA5DK,uCA4DuBjC,GA5DvB,EA4D4BC,GA5D5B,EA4DiCC,IA5DjC,EA4DuC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtCK,oCAFsC,GAE3BP,IAAIQ,MAAJ,CAAWD,QAFgB;AAGtCa,iCAHsC,GAG9B,EAH8B;;AAI1CA,kCAAMV,MAAN,GAAeH,QAAf;AACAa,kCAAMT,OAAN,GAAgB,QAAhB;AAL0C;AAAA,mCAMhBuB,kBAAOC,QAAP,CAAgB5B,QAAhB,CANgB;;AAAA;AAMtC6B,yCANsC;;AAAA,gCAOrCA,aAPqC;AAAA;AAAA;AAAA;;AAAA,8DAQ/BnC,IAAIc,MAAJ,CAAW,GAAX,EAAgBsB,GAAhB,EAR+B;;AAAA;AAAA;AAAA,mCASxBzB,cAAIgB,KAAJ,CAAU,EAAElB,QAAQH,QAAV,EAAV,CATwB;;AAAA;AAStCqB,iCATsC;AAAA,8DAUnC3B,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEY,YAAF,EAArB,CAVmC;;AAAA;AAAA;AAAA;;AAY1C1B;;AAZ0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcjD,KA1EU;;;AA4EX;AACMoC,cA7EK,sBA6EMtC,GA7EN,EA6EWC,GA7EX,EA6EgBC,IA7EhB,EA6EsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBqC,iCAFqB,GAEbvC,IAAIQ,MAAJ,CAAW+B,KAFE;AAAA;AAAA,mCAGF3B,cAAIuB,QAAJ,CAAaI,KAAb,EAClBhB,QADkB,CACT,MADS,EAElBA,QAFkB,CAET,QAFS,CAHE;;AAAA;AAGrBe,sCAHqB;;AAAA,gCAMpBA,UANoB;AAAA;AAAA;AAAA;;AAAA,8DAOdpC,KAAK,IAAII,kBAAJ,CAAa,GAAb,CAAL,CAPc;;AAAA;AAQzBkC,oCAAQC,GAAR,CAAYH,UAAZ;AARyB,8DASlBrC,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBsB,UAArB,CATkB;;AAAA;AAAA;AAAA;;AAWzBpC;;AAXyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAahC,KA1FU;;;AA4FX;AACMwC,cA7FK,sBA6FM1C,GA7FN,EA6FWC,GA7FX,EA6FgBC,IA7FhB,EA6FsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBqC,iCADyB,GACjBvC,IAAIQ,MAAJ,CAAW+B,KADM;AAEzBhC,oCAFyB,GAEdP,IAAIQ,MAAJ,CAAWD,QAFG;AAAA;AAAA,mCAINK,cAAIuB,QAAJ,CAAaI,KAAb,CAJM;;AAAA;AAIzBD,sCAJyB;;AAAA,gCAKxBA,UALwB;AAAA;AAAA;AAAA;;AAAA,8DAMlBpC,KAAK,IAAII,kBAAJ,CAAa,GAAb,CAAL,CANkB;;AAAA;AAAA;AAAA,mCAQH4B,kBAAOC,QAAP,CAAgB5B,QAAhB,CARG;;AAAA;AAQzB6B,yCARyB;;AAAA,gCASxBA,aATwB;AAAA;AAAA;AAAA;;AAAA,8DAUlBlC,KAAK,IAAII,kBAAJ,CAAa,GAAb,CAAL,CAVkB;;AAAA;AAYzBqC,kCAZyB,GAYhB3C,IAAI4C,IAAJ,CAASC,GAZO;;AAAA,gCAavBF,UAAUP,cAAcQ,IAbD;AAAA;AAAA;AAAA;;AAAA,8DAclB1C,KAAK,IAAII,kBAAJ,CAAa,GAAb,EAAkB,6BAAlB,CAAL,CAdkB;;AAAA;AAe7B;AACA8B,0CAAcrB,MAAd,GAAuB,UAAvB;AACAqB,0CAAcU,QAAd,GAAyBR,WAAWM,IAApC;AAjB6B;AAAA,mCAkBvBR,cAAcW,IAAd,EAlBuB;;AAAA;AAmB7BP,oCAAQC,GAAR,CAAYL,cAAcU,QAA1B;AACA;AACAR,uCAAWvB,MAAX,GAAoB,UAApB;AArB6B;AAAA,mCAsBvBuB,WAAWS,IAAX,EAtBuB;;AAAA;AAAA,8DAwBtB9C,IAAIc,MAAJ,CAAW,GAAX,EAAgBsB,GAAhB,EAxBsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BhC,KAvHU;;;AA0HX;AACMW,aA3HK,qBA2HKhD,GA3HL,EA2HUC,GA3HV,EA2HeC,IA3Hf,EA2HqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBqC,iCADwB,GAChBvC,IAAIQ,MAAJ,CAAW+B,KADK;AAExBhC,oCAFwB,GAEbP,IAAIQ,MAAJ,CAAWD,QAFE;AAAA;AAAA,mCAILK,cAAIuB,QAAJ,CAAaI,KAAb,CAJK;;AAAA;AAIxBD,sCAJwB;;AAAA,gCAKvBA,UALuB;AAAA;AAAA;AAAA;;AAAA,8DAMjBpC,KAAK,IAAII,kBAAJ,CAAa,GAAb,CAAL,CANiB;;AAAA;AAAA;AAAA,mCAQF4B,kBAAOC,QAAP,CAAgB5B,QAAhB,CARE;;AAAA;AAQxB6B,yCARwB;;AAAA,gCASvBA,aATuB;AAAA;AAAA;AAAA;;AAAA,8DAUjBlC,KAAK,IAAII,kBAAJ,CAAa,GAAb,CAAL,CAViB;;AAAA;AAYxBqC,kCAZwB,GAYf3C,IAAI4C,IAAJ,CAASC,GAZM;;AAAA,gCAatBF,UAAUP,cAAcQ,IAbF;AAAA;AAAA;AAAA;;AAAA,8DAcjB1C,KAAK,IAAII,kBAAJ,CAAa,GAAb,EAAkB,6BAAlB,CAAL,CAdiB;;AAAA;AAe5B;AACAgC,uCAAWvB,MAAX,GAAoB,SAApB;AAhB4B;AAAA,mCAiBtBuB,WAAWS,IAAX,EAjBsB;;AAAA;AAAA,8DAmBrB9C,IAAIc,MAAJ,CAAW,GAAX,EAAgBsB,GAAhB,EAnBqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB/B,KAhJU;;;AAmJX;AACMY,wBApJK,gCAoJgBjD,GApJhB,EAoJqBC,GApJrB,EAoJ0BC,IApJ1B,EAoJgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCqC,iCADmC,GAC3BvC,IAAIQ,MAAJ,CAAW+B,KADgB;AAEnChC,oCAFmC,GAExBP,IAAIQ,MAAJ,CAAWD,QAFa;AAAA;AAAA,mCAIhBK,cAAIuB,QAAJ,CAAaI,KAAb,CAJgB;;AAAA;AAInCD,sCAJmC;;AAAA,gCAKlCA,UALkC;AAAA;AAAA;AAAA;;AAAA,8DAM5BpC,KAAK,IAAII,kBAAJ,CAAa,GAAb,CAAL,CAN4B;;AAAA;AAAA;AAAA,mCAQb4B,kBAAOC,QAAP,CAAgB5B,QAAhB,CARa;;AAAA;AAQnC6B,yCARmC;;AAAA,gCASlCA,aATkC;AAAA;AAAA;AAAA;;AAAA,8DAU5BlC,KAAK,IAAII,kBAAJ,CAAa,GAAb,CAAL,CAV4B;;AAAA;AAanCqC,kCAbmC,GAa1B3C,IAAI4C,IAAJ,CAASC,GAbiB;;AAcvCL,oCAAQC,GAAR,QAAoBE,MAApB,yCAAoBA,MAApB;;AAduC,gCAejCA,UAAUP,cAAcU,QAfS;AAAA;AAAA;AAAA;;AAAA,8DAgB5B5C,KAAK,IAAII,kBAAJ,CAAa,GAAb,EAAkB,6BAAlB,CAAL,CAhB4B;;AAAA;AAiBvC;AACA8B,0CAAcrB,MAAd,GAAuB,YAAvB;AAlBuC;AAAA,mCAmBjCqB,cAAcW,IAAd,EAnBiC;;AAAA;AAAA,8DAqBhC9C,IAAIc,MAAJ,CAAW,GAAX,EAAgBsB,GAAhB,EArBgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuB1C;AA3KU,C","file":"bid.controller.js","sourcesContent":["import Bid from '../models/bid.model';\nimport Bricol from '../models/bricole.model';\nimport User from '../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\n\nexport default {\n\n    //validation for create new bid\n    validateBody() {\n        let validations = [\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n            body(\"user\").exists().withMessage(\"user is required\"),\n            body('offerDescription').exists().withMessage(\"offerDescription  is required\"),\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n        ];\n        return validations;\n    },\n\n    //create new Bid for specific bricol \n    async createNewBid(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            let bricolId = req.params.bricolId;\n            req.body.bricol = bricolId;\n            req.body.bidType = 'inCity';\n            let newBid = await Bid.create(req.body);\n            return res.status(201).json(newBid);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all Bid for one Bricol \n    async retriveAllBidsForBricol(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n            let bricolId = req.params.bricolId;\n            let query = {}\n            query.bricol = bricolId;\n            query.bidType = 'inCity';\n            let allDocs = await Bid.find(query)\n                .populate('user')\n                .populate('bricol').skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await Bid.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //count number of bids to specific bricol\n    async countNumberOfBidToONeBricol(req, res, next) {\n        try {\n            let bricolId = req.params.bricolId;\n            let query = {};\n            query.bricol = bricolId;\n            query.bidType = 'inCity'\n            let bricolDetails = await Bricol.findById(bricolId);\n            if (!bricolDetails)\n                return res.status(404).end();\n            let count = await Bid.count({ bricol: bricolId })\n            return res.status(200).json({ count });\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive Bid Details \n    async bidDetails(req, res, next) {\n        try {\n            let bidId = req.params.bidId;\n            let bidDetails = await Bid.findById(bidId)\n                .populate('user')\n                .populate('bricol')\n            if (!bidDetails)\n                return next(new ApiError(404));\n            console.log(bidDetails)\n            return res.status(200).json(bidDetails)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //acceppt bid \n    async accepptBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricol details \n        bricolDetails.status = \"assigned\";\n        bricolDetails.bricoler = bidDetails.user;\n        await bricolDetails.save();\n        console.log(bricolDetails.bricoler)\n        //update bid \n        bidDetails.status = 'accepted';\n        await bidDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n\n    //refuse bid \n    async refuseBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bid \n        bidDetails.status = 'refused';\n        await bidDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n\n    //make bricole in progress  \n    async makeBricolInProgress(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n\n        let userId = req.user._id;\n        console.log(typeof (userId))\n        if (!(userId == bricolDetails.bricoler))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricole by bricoler  \n        bricolDetails.status = 'inProgress';\n        await bricolDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n}\n\n\n"]}