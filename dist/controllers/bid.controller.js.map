{"version":3,"sources":["../../src/controllers/bid.controller.js"],"names":["validateBody","validations","exists","withMessage","createNewBid","req","res","next","validationErrors","array","length","ApiError","Bricol","findById","params","bricolId","bricolDetails","status","end","query","user","body","bricol","bidType","Bid","findOne","bidExist","console","log","Notification","create","targetUser","subjectType","subject","text","newNoti","title","send","newBid","json","retriveAllBidsForBricol","limit","parseInt","page","find","populate","skip","sort","creationDate","allDocs","count","ApiResponse","Math","ceil","countNumberOfBidToONeBricol","bidDetails","bidId","accepptBid","_id","userId","bricoler","save","historyQuery","serviceType","service","id","History","historyDoc","refuseBid","makeBricolInProgress"],"mappings":"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","file":"bid.controller.js","sourcesContent":["import Bid from '../models/bid.model';\nimport Bricol from '../models/bricole.model';\nimport User from '../models/user.model';\nimport History from '../models/history.model';\nimport Notification from '../models/notification.model';\n\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\n\nexport default {\n\n    //validation for create new bid\n    validateBody() {\n        let validations = [\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n            body(\"user\").exists().withMessage(\"user is required\"),\n            body('offerDescription').exists().withMessage(\"offerDescription  is required\"),\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n        ];\n        return validations;\n    },\n\n    //create new Bid for specific bricol \n    async createNewBid(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n            let bricolDetails = await Bricol.findById(req.params.bricolId);\n            if (!bricolDetails)\n                return res.status(404).end();\n\n            let query = {\n                user: req.body.user,\n                bricol: req.params.bricolId,\n                bidType: 'bricol'\n            }\n            let bidExist = await Bid.findOne(query);\n            if (bidExist) {\n                console.log(bidExist)\n                return next(new ApiError(400, 'لا يمكنك إضافة عرضين لنفس الخدمة'));\n            }\n            //in app notification \n            let newNoti = await Notification.create({\n                targetUser: bricolDetails.user,\n                subjectType: 'bricol',\n                subject: req.params.bricolId,\n                text: 'لديك عرض جديد على خدمتك',\n            });\n\n            //send notifications\n            let title = \"لديك عرض جديد على خدمتك\";\n            let body = \"أضاف أحد مزودي الخدمات عرضًا جديدًا لخدمتك ،خذ جولة واقرأ هذا العرض\"\n            send(bricolDetails.user, title, body)\n\n            let bricolId = req.params.bricolId;\n            req.body.bricol = bricolId;\n            req.body.bidType = 'bricol';\n            let newBid = await Bid.create(req.body);\n            return res.status(201).json(newBid);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all Bid for one Bricol \n    async retriveAllBidsForBricol(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n            let bricolId = req.params.bricolId;\n            let query = {}\n            query.bricol = bricolId;\n            query.bidType = 'bricol';\n            let allDocs = await Bid.find(query)\n                .populate('user')\n                .populate('bricol').skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await Bid.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //count number of bids to specific bricol\n    async countNumberOfBidToONeBricol(req, res, next) {\n        try {\n            let bricolId = req.params.bricolId;\n            let query = {};\n            query.bricol = bricolId;\n            query.bidType = 'bricol'\n            let bricolDetails = await Bricol.findById(bricolId);\n            if (!bricolDetails)\n                return res.status(404).end();\n            let count = await Bid.count({ bricol: bricolId })\n            return res.status(200).json({ count });\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive Bid Details \n    async bidDetails(req, res, next) {\n        try {\n            let bidId = req.params.bidId;\n            let bidDetails = await Bid.findById(bidId)\n                .populate('user')\n                .populate('bricol')\n            if (!bidDetails)\n                return next(new ApiError(404));\n            console.log(bidDetails)\n            return res.status(200).json(bidDetails)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //acceppt bid \n    async accepptBid(req, res, next) {\n        console.log(req.user._id)\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //  update bricol details \n        bricolDetails.status = \"assigned\";\n        bricolDetails.bricoler = bidDetails.user;\n        await bricolDetails.save();\n        console.log(bricolDetails.bricoler)\n        //update bid \n        bidDetails.status = 'accepted';\n        await bidDetails.save();\n\n        //update bricole history \n        let historyQuery = {\n            serviceType: 'bricol',\n            service: bricolDetails.id,\n            user: bricolDetails.user,\n        }\n        let historyDoc = await History.findOne(historyQuery);\n        console.log(historyDoc)\n        historyDoc.status = \"assigned\";\n        historyDoc.bricoler = bidDetails.user;\n        await historyDoc.save();\n        console.log(await History.findOne(historyQuery));\n\n        //in app notification \n        let newNoti = await Notification.create({\n            targetUser: bidDetails.user,\n            subjectType: 'bid',\n            subject: bidDetails.id,\n            text: 'تم قبول عرضك من مالك الخدمة',\n        });\n\n        //send notifications\n        let title = \"تم قبول عرضك\";\n        let body = \"تم قبول عرضك من مالك الخدمة،اعمل بجد لكسب الثقة من الجميع\"\n        send(bidDetails.user, title, body)\n\n        //return result\n        return res.status(204).end();\n\n    },\n\n\n    //refuse bid \n    async refuseBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bid \n        bidDetails.status = 'refused';\n        await bidDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n\n    //make bricole in progress  \n    async makeBricolInProgress(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n\n        let userId = req.user._id;\n        console.log(typeof (userId))\n        if (!(userId == bricolDetails.bricoler))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricole by bricoler  \n        bricolDetails.status = 'inProgress';\n        await bricolDetails.save();\n\n        //update bricole history \n        let historyQuery = {\n            serviceType: 'bricol',\n            service: bricolDetails.id,\n            user: bricolDetails.user,\n        }\n        let historyDoc = await History.findOne(historyQuery);\n        console.log(historyDoc)\n        historyDoc.status = \"inProgress\";\n        await historyDoc.save();\n\n        //return responce \n        return res.status(204).end();\n\n    },\n\n}\n\n\n"]}