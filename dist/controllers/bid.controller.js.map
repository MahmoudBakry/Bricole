{"version":3,"sources":["../../src/controllers/bid.controller.js"],"names":["validateBody","validations","exists","withMessage","createNewBid","req","res","next","validationErrors","array","length","ApiError","query","user","body","bricol","params","bricolId","bidType","Bid","find","bidExist","create","newBid","status","json","retriveAllBidsForBricol","limit","parseInt","page","populate","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil","countNumberOfBidToONeBricol","Bricol","findById","bricolDetails","end","bidDetails","bidId","console","log","accepptBid","userId","_id","bricoler","save","refuseBid","makeBricolInProgress"],"mappings":"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","file":"bid.controller.js","sourcesContent":["import Bid from '../models/bid.model';\nimport Bricol from '../models/bricole.model';\nimport User from '../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\n\nexport default {\n\n    //validation for create new bid\n    validateBody() {\n        let validations = [\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n            body(\"user\").exists().withMessage(\"user is required\"),\n            body('offerDescription').exists().withMessage(\"offerDescription  is required\"),\n            body(\"cost\").exists().withMessage(\"cost is required\"),\n        ];\n        return validations;\n    },\n\n    //create new Bid for specific bricol \n    async createNewBid(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            let query = {\n                user: req.body.user,\n                bricol: req.params.bricolId,\n                bidType : 'bricol'\n            }\n            let bidExist = await Bid.find(query);\n            if (bidExist)\n                return next(new ApiError(400, 'you have already bid before in the same bricol'));\n\n            let bricolId = req.params.bricolId;\n            req.body.bricol = bricolId;\n            req.body.bidType = 'bricol';\n            let newBid = await Bid.create(req.body);\n            return res.status(201).json(newBid);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all Bid for one Bricol \n    async retriveAllBidsForBricol(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n            let bricolId = req.params.bricolId;\n            let query = {}\n            query.bricol = bricolId;\n            query.bidType = 'bricol';\n            let allDocs = await Bid.find(query)\n                .populate('user')\n                .populate('bricol').skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n            let count = await Bid.count(query);\n\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //count number of bids to specific bricol\n    async countNumberOfBidToONeBricol(req, res, next) {\n        try {\n            let bricolId = req.params.bricolId;\n            let query = {};\n            query.bricol = bricolId;\n            query.bidType = 'bricol'\n            let bricolDetails = await Bricol.findById(bricolId);\n            if (!bricolDetails)\n                return res.status(404).end();\n            let count = await Bid.count({ bricol: bricolId })\n            return res.status(200).json({ count });\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive Bid Details \n    async bidDetails(req, res, next) {\n        try {\n            let bidId = req.params.bidId;\n            let bidDetails = await Bid.findById(bidId)\n                .populate('user')\n                .populate('bricol')\n            if (!bidDetails)\n                return next(new ApiError(404));\n            console.log(bidDetails)\n            return res.status(200).json(bidDetails)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //acceppt bid \n    async accepptBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricol details \n        bricolDetails.status = \"assigned\";\n        bricolDetails.bricoler = bidDetails.user;\n        await bricolDetails.save();\n        console.log(bricolDetails.bricoler)\n        //update bid \n        bidDetails.status = 'accepted';\n        await bidDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n\n    //refuse bid \n    async refuseBid(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n        let userId = req.user._id;\n        if (!(userId == bricolDetails.user))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bid \n        bidDetails.status = 'refused';\n        await bidDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n\n    //make bricole in progress  \n    async makeBricolInProgress(req, res, next) {\n        let bidId = req.params.bidId;\n        let bricolId = req.params.bricolId;\n\n        let bidDetails = await Bid.findById(bidId);\n        if (!bidDetails)\n            return next(new ApiError(404));\n\n        let bricolDetails = await Bricol.findById(bricolId);\n        if (!bricolDetails)\n            return next(new ApiError(404));\n\n\n        let userId = req.user._id;\n        console.log(typeof (userId))\n        if (!(userId == bricolDetails.bricoler))\n            return next(new ApiError(403, 'not access to this resource'))\n        //update bricole by bricoler  \n        bricolDetails.status = 'inProgress';\n        await bricolDetails.save();\n\n        return res.status(204).end();\n\n    },\n\n}\n\n\n"]}