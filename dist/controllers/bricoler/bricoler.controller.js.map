{"version":3,"sources":["../../../src/controllers/bricoler/bricoler.controller.js"],"names":["_","deg2rad","deg","Math","PI","fetchAllBricoler","req","res","next","limit","parseInt","query","page","jobs","gender","q","matchQueryRegx","RegExp","about","completed","User","find","populate","skip","sort","creationDate","allDocs","userLocation","user","location","result","x","length","bricolerLocationToDistance","lang1","parseFloat","lat1","console","log","lang2","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","push","bricol","distanceInKm","count","send","ApiResponse","ceil","fetchRequestOfOneBricoler","bricolerId","params","findById","bricolerDetails","status","end","bricoler","SpecialRequest"],"mappings":"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","file":"bricoler.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport SpecialRequest from '../../models/special-request.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\nimport * as _ from 'lodash';\n\n\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\n\nexport default {\n    //retrive all user that have complete profile \n    async fetchAllBricoler(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 200;\n            const page = req.query.page || 1;\n            let { jobs, gender } = req.query\n            let query = {};\n            //filter by gender\n            if (gender)\n                query.gender = gender;\n            //search by word in about of bricoler (user)\n            if (req.query.q) {\n                const matchQueryRegx = new RegExp(escapeRegExp(req.query.q), 'i')\n                query.about = matchQueryRegx;\n            }\n            query.completed = true\n\n            let allDocs = await User.find(query)\n                .populate('city')\n                .populate('jobs')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            //1 - calculate distance between user and bricoler\n            let userLocation = req.user.location;\n            let result = []\n            for (let x = 0; x < allDocs.length; x++) {\n                let bricolerLocationToDistance = allDocs[x].location;\n\n                //first locattion point\n                let lang1 = parseFloat(bricolerLocationToDistance[0]);\n                let lat1 = parseFloat(bricolerLocationToDistance[1]);\n                console.log(lang1)\n\n                //scound location point\n                let lang2 = parseFloat(userLocation[0]);\n                let lat2 = parseFloat(userLocation[1]);\n\n                let R = 6371; // Radius of the earth in km\n                let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n                let dLon = deg2rad(lang2 - lang1);\n                let a =\n                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n                let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                let d = R * c; // Distance in km\n                //console.log(d)\n                result.push({ bricol: allDocs[x], distanceInKm: d })\n            }\n\n\n\n\n            let count = await User.count(query);\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n\n    },\n\n    //fetch all requests for specific bricoler \n    async fetchRequestOfOneBricoler(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 200;\n            const page = req.query.page || 1;\n            let bricolerId = req.params.bricolerId;\n\n            let bricolerDetails = await User.findById(bricolerId);\n            if (!bricolerDetails)\n                return res.status(404).end();\n            let query = {}\n            query.bricoler = bricolerId;\n            query.status = 'pennding'\n            let allDocs = await SpecialRequest.find(query)\n                .populate('user')\n                .populate('bricoler')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({creationDate : -1})\n\n            let count = await SpecialRequest.count(query);\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n}"]}