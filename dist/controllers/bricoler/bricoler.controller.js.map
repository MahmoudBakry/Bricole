{"version":3,"sources":["../../../src/controllers/bricoler/bricoler.controller.js"],"names":["_","fetchAllBricoler","req","res","next","limit","parseInt","query","page","jobs","gender","q","matchQueryRegx","RegExp","about","completed","User","find","populate","skip","sort","creationDate","allDocs","count","send","ApiResponse","Math","ceil"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;IACYA,C;;;;;;;;kBAGG;AACX;AACMC,oBAFK,4BAEYC,GAFZ,EAEiBC,GAFjB,EAEsBC,IAFtB,EAE4B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzBC,iCAFyB,GAEjBC,SAASJ,IAAIK,KAAJ,CAAUF,KAAnB,KAA6B,GAFZ;AAGzBG,gCAHyB,GAGlBN,IAAIK,KAAJ,CAAUC,IAAV,IAAkB,CAHA;AAAA,yCAIRN,IAAIK,KAJI,EAIzBE,IAJyB,cAIzBA,IAJyB,EAInBC,MAJmB,cAInBA,MAJmB;AAK3BH,iCAL2B,GAKnB,EALmB;AAM/B;;AACA,gCAAIG,MAAJ,EACIH,MAAMG,MAAN,GAAeA,MAAf;AACJ;AACA,gCAAIR,IAAIK,KAAJ,CAAUI,CAAd,EAAiB;AACPC,8CADO,GACU,IAAIC,MAAJ,CAAW,0BAAaX,IAAIK,KAAJ,CAAUI,CAAvB,CAAX,EAAsC,GAAtC,CADV;;AAEbJ,sCAAMO,KAAN,GAAcF,cAAd;AACH;AACDL,kCAAMQ,SAAN,GAAkB,IAAlB;;AAd+B;AAAA,mCAgBXC,eAAKC,IAAL,CAAUV,KAAV,EACfW,QADe,CACN,MADM,EAEfA,QAFe,CAEN,MAFM,EAGfC,IAHe,CAGV,CAACX,OAAO,CAAR,IAAaH,KAHH,EAIfA,KAJe,CAITA,KAJS,EAIFe,IAJE,CAIG,EAAEC,cAAc,CAAC,CAAjB,EAJH,CAhBW;;AAAA;AAgB3BC,mCAhB2B;AAAA;AAAA,mCAsBbN,eAAKO,KAAL,CAAWhB,KAAX,CAtBa;;AAAA;AAsB3BgB,iCAtB2B;AAAA,6DAuBxBpB,IAAIqB,IAAJ,CAAS,IAAIC,qBAAJ,CACZH,OADY,EAEZd,IAFY,EAGZkB,KAAKC,IAAL,CAAUJ,QAAQlB,KAAlB,CAHY,EAIZA,KAJY,EAKZkB,KALY,EAMZrB,GANY,CAAT,CAvBwB;;AAAA;AAAA;AAAA;;AAgC/BE;;AAhC+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCtC;AArCU,C","file":"bricoler.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\nimport * as _ from 'lodash';\n\n\nexport default {\n    //retrive all user that have complete profile \n    async fetchAllBricoler(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 200;\n            const page = req.query.page || 1;\n            let { jobs, gender } = req.query\n            let query = {};\n            //filter by gender\n            if (gender)\n                query.gender = gender;\n            //search by word in about of bricoler (user)\n            if (req.query.q) {\n                const matchQueryRegx = new RegExp(escapeRegExp(req.query.q), 'i')\n                query.about = matchQueryRegx;\n            }\n            query.completed = true\n\n            let allDocs = await User.find(query)\n                .populate('city')\n                .populate('jobs')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            let count = await User.count(query);\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n\n    }\n}"]}