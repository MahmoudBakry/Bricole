{"version":3,"sources":["../../../src/controllers/bricoler/special-request.controller.js"],"names":["_","validateBody","isUpdate","validations","exists","withMessage","createNewSpecialRequest","req","res","next","validationErrors","array","length","ApiError","bricolerId","params","files","body","imgs","x","push","lang","lat","requestLocation","location","dueDate","parseInt","user","id","bricoler","SpecialRequest","create","newDoc","findById","populate","createdDoc","status","json","retriveOneRequestDetails","User","bricolerDetails","end","requestId","requestDetails","acceptRequest","save"],"mappings":"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","file":"special-request.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport SpecialRequest from '../../models/special-request.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\nimport * as _ from 'lodash';\nimport { toImgUrl } from '../../utils/index'\n\nexport default {\n\n    //validation for create new request\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"title\").exists().withMessage(\"title is required\"),\n            body(\"description\").exists().withMessage(\"descripption is required\"),\n            body('lang').exists().withMessage(\"lang  is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"dueDate\").exists().withMessage(\"dueDate is required\")\n        ];\n        return validations;\n    },\n\n    async createNewSpecialRequest(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n\n            let bricolerId = req.params.bricolerId;\n            //prepare data \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            } else\n                return next(new ApiError(422, \"imgs are required\"))\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let requestLocation = [lang, lat] //modify location \n            req.body.location = requestLocation;\n            req.body.dueDate = parseInt(req.body.dueDate)\n            req.body.user = req.user.id;\n            req.body.bricoler = bricolerId;\n\n            //create new doc \n            let newDoc = await SpecialRequest.create(req.body);\n            let createdDoc = await SpecialRequest.findById(newDoc.id)\n                .populate('user')\n                .populate('bricoler')\n\n            return res.status(201).json(createdDoc);\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive one request \n    async retriveOneRequestDetails(req, res, next) {\n        try {\n            let bricolerId = req.params.bricolerId;\n            let bricolerDetails = await User.findById(bricolerId);\n            if (!bricolerDetails)\n                res.status(404).end();\n            let requestId = req.params.requestId;\n            let requestDetails = await SpecialRequest.findById(requestId)\n                .populate('user')\n                .populate('bricoler')\n            if (!requestDetails)\n                return res.status(404).end()\n            return res.status(200).json(requestDetails);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //accept request by bricoler \n    async acceptRequest(req, res, next) {\n        try {\n\n            let bricolerId = req.params.bricolerId;\n            let bricolerDetails = await User.findById(bricolerId);\n            if (!bricolerDetails)\n                res.status(404).end();\n\n            let requestId = req.params.requestId;\n            let requestDetails = await SpecialRequest.findById(requestId)\n            if (!requestDetails)\n                return res.status(404).end();\n\n            if (!(req.user.id == requestDetails.bricoler))\n                next(new ApiError(403, 'must bricoler only can accept it'));\n\n            requestDetails.status = \"accepted\";\n            await requestDetails.save();\n\n            let newDoc = await SpecialRequest.findById(requestDetails.id)\n                .populate('user')\n                .populate('bricoler')\n\n            return res.status(200).json(newDoc);\n\n        } catch (err) {\n            next(err)\n        }\n    }\n}\n\n\n"]}