{"version":3,"sources":["../../../src/controllers/bricoler/special-request.controller.js"],"names":["_","validateBody","isUpdate","validations","exists","withMessage","createNewSpecialRequest","req","res","next","validationErrors","array","length","ApiError","bricolerId","params","files","body","imgs","x","push","lang","lat","requestLocation","location","dueDate","parseInt","user","id","bricoler","SpecialRequest","create","newDoc","findById","populate","createdDoc","historyObject","serviceType","service","status","History","historyDoc","json","retriveOneRequestDetails","User","bricolerDetails","end","requestId","requestDetails","acceptRequest","save","historyQuery","findOne","console","log","ignoreRequst"],"mappings":"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","file":"special-request.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport SpecialRequest from '../../models/special-request.model';\nimport History from '../../models/history.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\nimport { body, param, validationResult } from 'express-validator/check';\nimport { escapeRegExp } from 'lodash';\nimport * as _ from 'lodash';\nimport { toImgUrl } from '../../utils/index'\n\nexport default {\n\n    //validation for create new request\n    validateBody(isUpdate = false) {\n        let validations = [\n            body(\"title\").exists().withMessage(\"title is required\"),\n            body(\"description\").exists().withMessage(\"descripption is required\"),\n            body('lang').exists().withMessage(\"lang  is required\"),\n            body(\"lat\").exists().withMessage(\"lat is required\"),\n            body(\"dueDate\").exists().withMessage(\"dueDate is required\")\n        ];\n        return validations;\n    },\n\n    async createNewSpecialRequest(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n\n\n            let bricolerId = req.params.bricolerId;\n            //prepare data \n            if (req.files.length > 0) {\n                req.body.imgs = []\n                for (let x = 0; x < req.files.length; x++) {\n                    req.body.imgs.push(await toImgUrl(req.files[x]))\n                }\n            }\n            let lang = req.body.lang;   //long\n            let lat = req.body.lat;//lat\n            let requestLocation = [lang, lat] //modify location \n            req.body.location = requestLocation;\n            req.body.dueDate = parseInt(req.body.dueDate)\n            req.body.user = req.user.id;\n            req.body.bricoler = bricolerId;\n\n            //create new doc \n            let newDoc = await SpecialRequest.create(req.body);\n            let createdDoc = await SpecialRequest.findById(newDoc.id)\n                .populate('user')\n                .populate('bricoler')\n\n            //create history doc \n            let historyObject = {\n                serviceType: 'special-request',\n                service: createdDoc.id,\n                user: createdDoc.user,\n                bricoler: createdDoc.bricoler,\n                status: 'pendding'\n            }\n            let historyDoc = await History.create(historyObject);\n\n            return res.status(201).json(createdDoc);\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive one request \n    async retriveOneRequestDetails(req, res, next) {\n        try {\n            let bricolerId = req.params.bricolerId;\n            let bricolerDetails = await User.findById(bricolerId);\n            if (!bricolerDetails)\n                res.status(404).end();\n            let requestId = req.params.requestId;\n            let requestDetails = await SpecialRequest.findById(requestId)\n                .populate('user')\n                .populate('bricoler')\n            if (!requestDetails)\n                return res.status(404).end()\n            return res.status(200).json(requestDetails);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //accept request by bricoler \n    async acceptRequest(req, res, next) {\n        try {\n\n            let bricolerId = req.params.bricolerId;\n            let bricolerDetails = await User.findById(bricolerId);\n            if (!bricolerDetails)\n                res.status(404).end();\n\n            let requestId = req.params.requestId;\n            let requestDetails = await SpecialRequest.findById(requestId)\n            if (!requestDetails)\n                return res.status(404).end();\n\n            if (!(req.user.id == requestDetails.bricoler))\n                next(new ApiError(403, 'must bricoler only can accept it'));\n\n            requestDetails.status = \"accepted\";\n            await requestDetails.save();\n\n            let newDoc = await SpecialRequest.findById(requestDetails.id)\n                .populate('user')\n                .populate('bricoler')\n\n            //update bricole history \n            let historyQuery = {\n                serviceType: 'special-request',\n                service: requestDetails.id,\n                user: requestDetails.user,\n                bricoler: requestDetails.bricoler\n            }\n            let historyDoc = await History.findOne(historyQuery);\n            console.log(historyDoc)\n            historyDoc.status = \"accepted\";\n            await historyDoc.save();\n\n            //return responce \n            return res.status(200).json(newDoc);\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    //ignore request by bricoler \n    async ignoreRequst(req, res, next) {\n        try {\n\n            let bricolerId = req.params.bricolerId;\n            let bricolerDetails = await User.findById(bricolerId);\n            if (!bricolerDetails)\n                res.status(404).end();\n\n            let requestId = req.params.requestId;\n            let requestDetails = await SpecialRequest.findById(requestId)\n            if (!requestDetails)\n                return res.status(404).end();\n\n            if (!(req.user.id == requestDetails.bricoler))\n                next(new ApiError(403, 'must bricoler only can ignored it'));\n\n            requestDetails.status = \"ignored\";\n            await requestDetails.save();\n\n            let newDoc = await SpecialRequest.findById(requestDetails.id)\n                .populate('user')\n                .populate('bricoler')\n\n            //update bricole history \n            let historyQuery = {\n                serviceType: 'special-request',\n                service: requestDetails.id,\n                user: requestDetails.user,\n                bricoler: requestDetails.bricoler\n            }\n            let historyDoc = await History.findOne(historyQuery);\n            console.log(historyDoc)\n            historyDoc.status = \"ignored\";\n            await historyDoc.save();\n            //return responce \n            return res.status(200).json(newDoc);\n\n        } catch (err) {\n            next(err)\n        }\n    }\n}\n\n\n"]}