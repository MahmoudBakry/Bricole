{"version":3,"sources":["../../../src/controllers/favourite/favourite.controller.js"],"names":["addFavouriteToMyList","req","res","next","body","bricolerId","ApiError","User","findById","bricolerDetails","status","end","userId","params","userDetails","bricolerIds","favouritArray","includes","push","save","newUser","console","log","retriveAllFavouriteBricolersOfOneUser","limit","parseInt","query","page","bricolerArray","arrayLength","length","result","x","populate","userDoc","count","send","ApiResponse","Math","ceil"],"mappings":"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","file":"favourite.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\n\n\nexport default {\n    //add one bricoler to user favourite list\n    async addFavouriteToMyList(req, res, next) {\n        try {\n            if (!req.body.bricolerId)\n                return next(new ApiError(422, 'bricoler Id is required'));\n            let bricolerDetails = await User.findById(req.body.bricolerId)\n\n            if (!bricolerDetails)\n                return res.status(404).end();\n\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n\n            if (!userDetails)\n                return res.status(404).end();\n\n            let bricolerIds = userDetails.favouritArray;\n            let bricolerId = req.body.bricolerId;\n\n            //check if this bricoler in my list or not \n            if (bricolerIds.includes(bricolerId))\n                return next(new ApiError(422, 'You have added this bricoler in your favourite list before'))\n\n            //if not found \n            userDetails.favouritArray.push(bricolerId);\n            await userDetails.save();\n\n            let newUser = await User.findById(userId);\n            console.log(newUser.favouritArray)\n            return res.status(204).end();\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive all favourite bricolers of one user \n    async retriveAllFavouriteBricolersOfOneUser(req, res, next) {\n        try {\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            let bricolerArray = userDetails.favouritArray;\n            let arrayLength = bricolerArray.length;\n            let result = [];\n            for (let x = 0; x < arrayLength; x++) {\n                let userDoc = await User.findById(bricolerArray[x])\n                    .populate('job')\n                    .populate('city')\n                result.push(userDoc);\n            }\n\n            let count = arrayLength;\n            return res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n}"]}