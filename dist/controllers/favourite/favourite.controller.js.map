{"version":3,"sources":["../../../src/controllers/favourite/favourite.controller.js"],"names":["addFavouriteToMyList","req","res","next","body","bricolerId","ApiError","User","findById","bricolerDetails","status","end","userId","params","userDetails","bricolerIds","favouritArray","includes","push","save","newUser","console","log","retriveAllFavouriteBricolersOfOneUser","bricolerArray","arrayLength","length","result","x","populate","userDoc","json"],"mappings":"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","file":"favourite.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\n\n\nexport default {\n    //add one bricoler to user favourite list\n    async addFavouriteToMyList(req, res, next) {\n        try {\n            if (!req.body.bricolerId)\n                return next(new ApiError(422, 'bricoler Id is required'));\n            let bricolerDetails = await User.findById(req.body.bricolerId)\n\n            if (!bricolerDetails)\n                return res.status(404).end();\n\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n\n            if (!userDetails)\n                return res.status(404).end();\n\n            let bricolerIds = userDetails.favouritArray;\n            let bricolerId = req.body.bricolerId;\n\n            //check if this bricoler in my list or not \n            if (bricolerIds.includes(bricolerId))\n                return next(new ApiError(422, 'You have added this bricoler in your favourite list before'))\n\n            //if not found \n            userDetails.favouritArray.push(bricolerId);\n            await userDetails.save();\n\n            let newUser = await User.findById(userId);\n            console.log(newUser.favouritArray)\n            return res.status(204).end();\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive all favourite bricolers of one user \n    async retriveAllFavouriteBricolersOfOneUser(req, res, next) {\n        try {\n\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            let bricolerArray = userDetails.favouritArray;\n            let arrayLength = bricolerArray.length;\n            let result = [];\n            for (let x = 0; x < arrayLength; x++) {\n                let userDoc = await User.findById(bricolerArray[x])\n                    .populate('job')\n                    .populate('city')\n                result.push(userDoc);\n            }\n\n            return res.status(200).json(result);\n\n        } catch (err) {\n            next(err)\n        }\n    },\n}"]}