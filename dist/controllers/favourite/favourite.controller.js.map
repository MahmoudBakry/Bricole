{"version":3,"sources":["../../../src/controllers/favourite/favourite.controller.js"],"names":["deg2rad","deg","Math","PI","addFavouriteToMyList","req","res","next","body","bricolerId","ApiError","User","findById","bricolerDetails","status","end","userId","params","userDetails","bricolerIds","favouritArray","includes","push","save","newUser","console","log","retriveAllFavouriteBricolersOfOneUser","limit","parseInt","query","page","bricolerArray","arrayLength","length","result","x","populate","userDoc","userLocation","user","location","finalResult","bricolerLocationToDistance","lang1","parseFloat","lat1","lang2","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","bricol","distanceInKm","count","send","ApiResponse","ceil"],"mappings":"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","file":"favourite.controller.js","sourcesContent":["import User from '../../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../../helpers/ApiResponse';\nimport ApiError from '../../helpers/ApiError';\n\n\n\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\nexport default {\n\n    //add one bricoler to user favourite list\n    async addFavouriteToMyList(req, res, next) {\n        try {\n            if (!req.body.bricolerId)\n                return next(new ApiError(422, 'bricoler Id is required'));\n            let bricolerDetails = await User.findById(req.body.bricolerId)\n\n            if (!bricolerDetails)\n                return res.status(404).end();\n\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n\n            if (!userDetails)\n                return res.status(404).end();\n\n            let bricolerIds = userDetails.favouritArray;\n            let bricolerId = req.body.bricolerId;\n\n            //check if this bricoler in my list or not \n            if (bricolerIds.includes(bricolerId))\n                return next(new ApiError(422, 'You have added this bricoler in your favourite list before'))\n\n            //if not found \n            userDetails.favouritArray.push(bricolerId);\n            await userDetails.save();\n\n            let newUser = await User.findById(userId);\n            console.log(newUser.favouritArray)\n            return res.status(204).end();\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive all favourite bricolers of one user \n    async retriveAllFavouriteBricolersOfOneUser(req, res, next) {\n        try {\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n\n            let bricolerArray = userDetails.favouritArray;\n            let arrayLength = bricolerArray.length;\n            let result = [];\n            for (let x = 0; x < arrayLength; x++) {\n                let userDoc = await User.findById(bricolerArray[x])\n                    .populate('job')\n                    .populate('city')\n                result.push(userDoc);\n            }\n\n            //1 - calculate distance between user and bricoler\n            let userLocation = req.user.location;\n            let finalResult = []\n            for (let x = 0; x < result.length; x++) {\n                let bricolerLocationToDistance = result[x].location;\n\n                //first locattion point\n                let lang1 = parseFloat(bricolerLocationToDistance[0]);\n                let lat1 = parseFloat(bricolerLocationToDistance[1]);\n                console.log(lang1)\n\n                //scound location point\n                let lang2 = parseFloat(userLocation[0]);\n                let lat2 = parseFloat(userLocation[1]);\n\n                let R = 6371; // Radius of the earth in km\n                let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n                let dLon = deg2rad(lang2 - lang1);\n                let a =\n                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n                let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                let d = R * c; // Distance in km\n                //console.log(d)\n                finalResult.push({ bricol: result[x], distanceInKm: d })\n            }\n\n            let count = arrayLength;\n            return res.send(new ApiResponse(\n                finalResult,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    },\n}"]}