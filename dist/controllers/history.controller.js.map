{"version":3,"sources":["../../src/controllers/history.controller.js"],"names":["retriveHistoryOfBricoler","req","res","next","limit","parseInt","query","page","bricolerId","params","User","findById","userDetails","status","end","bricoler","History","find","populate","skip","sort","creationDate","allDoc","count","send","ApiResponse","Math","ceil","retriveHistoryOfUser","userId","user"],"mappings":"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","file":"history.controller.js","sourcesContent":["import History from '../models/history.model';\nimport User from '../models/user.model';\nimport mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\n\nexport default {\n    //retrive all bricoler (provider) history \n    async retriveHistoryOfBricoler(req, res, next) {\n        try {\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let bricolerId = req.params.bricolerId;\n            let userDetails = await User.findById(bricolerId);\n\n            if (!userDetails)\n                return res.status(404).end();\n            let query = {}\n            query.bricoler = bricolerId;\n            let allDoc = await History.find(query)\n                .populate('service')\n                .populate('bricoler')\n                .populate('user')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            let count = await History.count(query);\n            return res.send(new ApiResponse(\n                allDoc,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n            \n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all user (client) history \n    async retriveHistoryOfUser(req, res, next) {\n        try {\n\n            const limit = parseInt(req.query.limit) || 20;\n            const page = req.query.page || 1;\n\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n            let query = {}\n            query.user = userId;\n            let allDoc = await History.find(query)\n                .populate('service')\n                .populate('bricoler')\n                .populate('user')\n                .skip((page - 1) * limit)\n                .limit(limit).sort({ creationDate: -1 })\n\n            let count = await History.count(query);\n            return res.send(new ApiResponse(\n                allDoc,\n                page,\n                Math.ceil(count / limit),\n                limit,\n                count,\n                req\n            ))\n\n        } catch (err) {\n            next(err)\n        }\n    }\n}\n\n\n"]}