{"version":3,"sources":["../src/app.js"],"names":["mongoose","Promise","global","connect","config","mongoUrl","connection","on","console","log","err","app","server","http","Server","use","req","res","next","apiAppUrl","protocol","get","express","static","path","join","__dirname","contype","headers","includes","status","send","error","bodyparser","json","limit","urlencoded","extended","parameterLimit","routes","Error","success","message"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport path from \"path\";\nimport bodyparser from \"body-parser\";\nimport cors from \"cors\";\nimport expressValidator from \"express-validator\";\nimport helmet from \"helmet\";\nimport mongoose from \"mongoose\";\nimport config from \"./config\";\nimport routes from './routes'\nmongoose.Promise = global.Promise;\nmongoose.connect(config.mongoUrl);\n\n//conect data base\nmongoose.connection.on('connected', () => {\n    console.log('\\x1b[32m%s\\x1b[0m', '[DB] Connected...');\n});\nmongoose.connection.on('error', err => console.log('\\x1b[31m%s\\x1b[0m', '[DB] Error : ' + err));\nmongoose.connection.on('disconnected', () => console.log('\\x1b[31m%s\\x1b[0m', '[DB] DisConnected...'));\n\n//build server \nconst app = express();\nconst server = http.Server(app);\n//config midleware\napp.use(cors());\napp.use(helmet());\n\n\napp.use((req, res, next) => {\n    config.apiAppUrl = req.protocol + '://' + req.get('host');\n    next();\n})\n\n\napp.use('/docs', express.static(path.join(__dirname, 'docs')));\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n\n// Ensure Content Type\napp.use('/', (req, res, next) => {\n    let contype = req.headers['content-type'];\n\n    if (contype && !((contype.includes('application/json') || contype.includes('multipart/form-data'))))\n        return res.status(415).send({ error: \"Unsupported Media Type (\" + contype + \")\" });\n    next();\n});\n\n\n\napp.use(bodyparser.json({ limit: '50mb' }));\napp.use(bodyparser.urlencoded({ limit: '50mb', extended: true, parameterLimit: 50000 }));\n\n\napp.use(expressValidator());\n\n\n\n//user routes \napp.use('/api/v1', routes)\n//Not Found Handler\napp.use((req, res, next) => {\n    const error = new Error(\"Not Found..!\");\n    error.status = 404\n    next(error);\n});\n\n//ERROR Handler\napp.use((err, req, res, next) => {\n    // if (err instanceof mongoose.CastError) {\n        // err.status = 404;\n        // err.message = `${err.model.modelName} Not Found`;\n    // }\n\n    const status = err.status ? err.status : 500;\n    res.status(status).json({\n        success: false,\n        error: err.message\n    });\n    console.log(err);\n});\n\n\n\n\nexport default app;"]}