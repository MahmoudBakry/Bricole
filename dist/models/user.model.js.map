{"version":3,"sources":["../../src/models/user.model.js"],"names":["UserSchema","Schema","userName","type","String","trim","required","enum","default","email","unique","password","phone","jobs","Number","ref","vehicleToWork","firstName","lastName","city","location","index","gender","img","birthDate","Date","creationDate","trusted","Boolean","nationalIdImgs","policyIdentityImage","pushTokens","rating","pre","next","account","isModified","salt","bcrypt","genSaltSync","hash","then","catch","console","log","err","methods","isValidPassword","newPassword","callback","user","compare","isMatch","set","transform","doc","ret","options","id","_id","__v","autoIncrement","initialize","mongoose","connection","plugin","model","startAt"],"mappings":"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","file":"user.model.js","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport autoIncrement from 'mongoose-auto-increment';\n\nconst UserSchema = new Schema({\n    userName: {\n        type: String,\n        trim: true,\n        required: true\n    },\n    type: {\n        type: String,\n        enum: [\"ADMIN\", \"NORMAL\"],\n        default: \"NORMAL\"\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    phone: {\n        type: String,\n        required: true,\n        unique: [true, \"Duplicated Phone\"]\n    },\n    jobs: [{\n        type: Number,\n        ref: \"job\",\n        required: true\n    }],\n    vehicleToWork: [{\n        type: String,\n        required: true\n    }],\n    firstName: {\n        type: String,\n        required: true\n    },\n    lastName: {\n        type: String,\n        required: true\n    },\n    city: {\n        type: Number,\n        ref: 'city',\n        required: true\n    },\n    location: {\n        type: [Number], // Don't forget [0=>longitude,1=>latitude]\n        required: true,\n        index: '2d'\n    },\n    gender: {\n        type: String,\n        enum: ['male', 'female']\n    },\n    img: { // url \n        type: String,\n        default: \"https://icon-icons.com/icons2/582/PNG/512/worker_icon-icons.com_55029.png\"\n    },\n    birthDate: {\n        type: Date,\n        required: true\n    },\n    creationDate: {\n        type: Date,\n        default: new Date\n    },\n    trusted: {\n        type: Boolean,\n        default: false\n    },\n    nationalIdImgs: [{\n        type: String,\n    }],\n    policyIdentityImage: {\n        type: String\n    },\n    pushTokens: [{\n        type: String\n    }],\n    rating: {\n        type: Number,\n        default: 0\n    }\n\n});\n\n\n\nUserSchema.pre(\"save\", function (next) {\n    const account = this;\n    if (!account.isModified('password')) return next();\n\n    const salt = bcrypt.genSaltSync();\n    bcrypt.hash(account.password, salt).then(hash => {\n        account.password = hash;\n        next();\n    }).catch(err => console.log(err));\n});\n\n\n\n\nUserSchema.methods.isValidPassword = function (newPassword, callback) {\n    let user = this;\n    bcrypt.compare(newPassword, user.password, function (err, isMatch) {\n        if (err)\n            return callback(err);\n        callback(null, isMatch);\n    })\n};\n\n\nUserSchema.set('toJSON', {\n    transform: function (doc, ret, options) {\n        ret.id = ret._id;\n\n        delete ret.password;\n        delete ret.pushTokens;\n        delete ret._id;\n        delete ret.__v;\n    }\n});\n\nautoIncrement.initialize(mongoose.connection);\nUserSchema.plugin(autoIncrement.plugin, {\n    model: 'user',\n    startAt: 1,\n});\n\nexport default mongoose.model(\"user\", UserSchema);"]}